if CS.DaneelModules==nil then CS.DaneelModules={}end;function math.isinteger(a)Daneel.Debug.StackTrace.BeginFunction("math.isinteger",a)local isinteger=false;if type(a)=="number"then isinteger=a==math.floor(a)end;Daneel.Debug.StackTrace.EndFunction()return isinteger end;function math.lerp(b,c,d,e)Daneel.Debug.StackTrace.BeginFunction("math.lerp",b,c,d,e)local f="math.lerp( a, b, factor[, easing] ) : "Daneel.Debug.CheckArgType(b,"a","number",f)Daneel.Debug.CheckArgType(c,"b","number",f)Daneel.Debug.CheckArgType(d,"factor","number",f)Daneel.Debug.CheckOptionalArgType(e,"easing","string",f)if e=="smooth"then d=d*2;if d<1 then d=0.5*d*d*d else d=d-2;d=0.5*d*d*d+2 end elseif e=="smooth in"then d=d*d*d elseif e=="smooth out"then d=d-1;d=d*d*d+1 end;Daneel.Debug.StackTrace.EndFunction()return b+(c-b)*d end;function math.warpangle(g)Daneel.Debug.StackTrace.BeginFunction("math.wrapangle",g)local f="math.wrapangle( angle ) : "Daneel.Debug.CheckArgType(g,"angle","number",f)if g>180 then g=g-360 elseif g<-180 then g=g+360 end;Daneel.Debug.StackTrace.EndFunction()return g end;function math.round(h,i)Daneel.Debug.StackTrace.BeginFunction("math.round",h,i)local f="math.round( value[, decimal] ) : "Daneel.Debug.CheckArgType(h,"value","number",f)Daneel.Debug.CheckOptionalArgType(i,"decimal","number",f)if i~=nil then h=math.floor(h*10^i+0.5)/10^i else h=math.floor(h+0.5)end;Daneel.Debug.StackTrace.EndFunction()return h end;function string.totable(j)Daneel.Debug.StackTrace.BeginFunction("string.totable",j)Daneel.Debug.CheckArgType(j,"string","string","string.totable( string )")local k={}for l=1,#j do table.insert(k,j:sub(l,l))end;Daneel.Debug.StackTrace.EndFunction()return k end;function string.ucfirst(j)if Daneel.Cache.ucfirst[j]~=nil then return Daneel.Cache.ucfirst[j]end;Daneel.Debug.StackTrace.BeginFunction("string.ucfirst",j)local f="string.ucfirst( string ) : "Daneel.Debug.CheckArgType(j,"string","string",f)local m=j:gsub("^%l",string.upper)Daneel.Cache.ucfirst[j]=m;Daneel.Debug.StackTrace.EndFunction()return m end;function string.lcfirst(j)if Daneel.Cache.lcfirst[j]~=nil then return Daneel.Cache.lcfirst[j]end;Daneel.Debug.StackTrace.BeginFunction("string.lcfirst",j)local f="string.lcfirst( string ) : "Daneel.Debug.CheckArgType(j,"string","string",f)local m=j:gsub("^%u",string.lower)Daneel.Cache.lcfirst[j]=m;Daneel.Debug.StackTrace.EndFunction()return m end;function string.split(j,n,o)Daneel.Debug.StackTrace.BeginFunction("string.split",j,n,o)local f="string.split( string, delimiter[, plainText] ) : "Daneel.Debug.CheckArgType(j,"string","string",f)Daneel.Debug.CheckArgType(n,"delimiter","string",f)Daneel.Debug.CheckOptionalArgType(o,"delimiterIsPattern","boolean",f)local p={}if o==nil and#n==1 then o=false end;if o then local q,r=j:find(n)if q~=nil then local s=n;n=j:sub(q,r)if string.startswith(j,n)then j=j:sub(#n+1,#j)end;if not j:endswith(n)then j=j..n end;if CS.IsWebPlayer then for match in j:gmatch("([^"..s.."]+)"..s)do table.insert(p,match)end else for match in j:gmatch("(.-)"..s)do table.insert(p,match)end end end else if j:find(n,1,true)~=nil then if string.startswith(j,n)then j=j:sub(#n+1,#j)end;if not j:endswith(n)then j=j..n end;local t=""local u=string.totable(j)local l=1;while l<=#u do local v=u[l]if v==n or j:sub(l,l-1+#n)==n then table.insert(p,t)t=""l=l+#n else t=t..v;l=l+1 end end;if#t>0 then table.insert(p,t)end end end;if#p==0 then p={j}end;Daneel.Debug.StackTrace.EndFunction()return p end;function string.startswith(j,t)Daneel.Debug.StackTrace.BeginFunction("string.startswith",j,t)local f="string.startswith( string, chunk ) : "Daneel.Debug.CheckArgType(j,"string","string",f)Daneel.Debug.CheckArgType(t,"chunk","string",f)local w=j:sub(1,#t)==t;Daneel.Debug.StackTrace.EndFunction()return w end;function string.endswith(j,t)Daneel.Debug.StackTrace.BeginFunction("string.endswith",j,t)local f="string.endswith( string, chunk ) : "Daneel.Debug.CheckArgType(j,"string","string",f)Daneel.Debug.CheckArgType(t,"chunk","string",f)local x=j:sub(#j-#t+1,#j)==t;Daneel.Debug.StackTrace.EndFunction()return x end;function string.trimstart(j)Daneel.Debug.StackTrace.BeginFunction("string.trimstart",j)local f="string.trimstart( string ) : "Daneel.Debug.CheckArgType(j,"string","string",f)local m=j:gsub("^%s+","")Daneel.Debug.StackTrace.EndFunction()return m end;function string.trimend(j)Daneel.Debug.StackTrace.BeginFunction("string.trimend",j)local f="string.trimend( string ) : "Daneel.Debug.CheckArgType(j,"string","string",f)local m=j:gsub("%s+$","")Daneel.Debug.StackTrace.EndFunction()return m end;function string.trim(j)Daneel.Debug.StackTrace.BeginFunction("string.trim",j)local f="string.trim(string) : "Daneel.Debug.CheckArgType(j,"string","string",f)local m=j:gsub("^%s+",""):gsub("%s+$","")Daneel.Debug.StackTrace.EndFunction()return m end;function table.copy(k,y,z)Daneel.Debug.StackTrace.BeginFunction("table.copy",k,y,z)local f="table.copy( table[, recursive, doNotCopyMetatable] ) :"Daneel.Debug.CheckArgType(k,"table","table",f)y=Daneel.Debug.CheckOptionalArgType(y,"recursive","boolean",f,false)z=Daneel.Debug.CheckOptionalArgType(z,"doNotCopyMetatable","boolean",f,false)local A={}if table.isarray(k)then for B,h in ipairs(k)do if type(h)=="table"and y then h=table.copy(h)end;table.insert(A,h)end else for B,h in pairs(k)do if type(h)=="table"and y then h=table.copy(h)end;A[B]=h end end;if z~=true then local C=getmetatable(k)if C~=nil then setmetatable(A,C)end end;Daneel.Debug.StackTrace.EndFunction()return A end;function table.containsvalue(k,D,E)Daneel.Debug.StackTrace.BeginFunction("table.constainsvalue",k,D,E)local f="table.containsvalue(table, value) : "Daneel.Debug.CheckArgType(k,"table","table",f)if D==nil then error(f.."Argument 'value' is nil.")end;Daneel.Debug.CheckOptionalArgType(E,"ignoreCase","boolean",f)if E and type(D)=='string'then D=D:lower()else E=false end;local F=false;for B,h in pairs(k)do if E and type(h)=="string"then h=h:lower()end;if D==h then F=true;break end end;Daneel.Debug.StackTrace.EndFunction()return F end;function table.getlength(k,G)Daneel.Debug.StackTrace.BeginFunction("table.getlength",k,G)local f="table.getlength( table[, keyType] ) : "Daneel.Debug.CheckArgType(k,"table","table",f)local H=0;if G~=nil then G=G:lower()end;for B,h in pairs(k)do if G==nil or type(B)==G or tostring(Daneel.Debug.GetType(B)):lower()==G then H=H+1 end end;Daneel.Debug.StackTrace.EndFunction()return H end;function table.print(k)Daneel.Debug.StackTrace.BeginFunction("table.print",k)local f="table.print(table) : "if k==nil then print(f.."Provided table is nil.")Daneel.Debug.StackTrace.EndFunction()return end;Daneel.Debug.CheckArgType(k,"table","table",f)local I=tostring(k)local J=Daneel.Debug.ToRawString(k)if I~=J then I=I.." / "..J end;print("~~~~~ table.print("..I..") ~~~~~ Start ~~~~~")local K=pairs;if table.getlength(k)==0 then print("Provided table is empty.")elseif table.isarray(k)then K=ipairs end;for B,h in K(k)do print(B,h)end;print("~~~~~ table.print("..I..") ~~~~~ End ~~~~~")Daneel.Debug.StackTrace.EndFunction()end;function table.merge(...)local L={...}if L==nil or#L==0 then Daneel.Debug.StackTrace.BeginFunction("table.merge")error("table.merge(...) : No argument provided. Need at least two.")end;Daneel.Debug.StackTrace.BeginFunction("table.merge",...)local M={}for l,k in ipairs(L)do local N=type(k)if N=="table"then if table.isarray(k)then for B,h in ipairs(k)do if not table.containsvalue(M,h)then table.insert(M,h)end end else for B,h in pairs(k)do if math.isinteger(B)then if not table.containsvalue(M,h)then table.insert(M,h)end else M[B]=h end end end elseif Daneel.Config.debug.enableDebug then print("WARNING : table.merge(...) : Argument n°"..l.." is of type '"..N.."' with value '"..tostring(k).."' instead of 'table'. The argument as been ignored.")end end;Daneel.Debug.StackTrace.EndFunction()return M end;function table.deepmerge(...)local L={...}if L==nil or#L==0 then Daneel.Debug.StackTrace.BeginFunction("table.deepmerge")error("table.deepmerge(...) : No argument provided. Need at least two.")end;Daneel.Debug.StackTrace.BeginFunction("table.deepmerge",...)local M={}for l,k in ipairs(L)do local N=type(k)if N=="table"then for B,h in pairs(k)do if math.isinteger(B)then if table.containsvalue(M,h)then table.insert(M,h)end else if M[B]~=nil and type(h)=="table"then local C=getmetatable(M[B])if C~=nil then M[B]=h else M[B]=table.deepmerge(M[B],h)end else M[B]=h end end end elseif Daneel.Config.debug.enableDebug then print("WARNING : table.deepmerge(...) : Argument n°"..l.." is of type '"..N.."' with value '"..tostring(k).."' instead of 'table'. The argument as been ignored.")end end;Daneel.Debug.StackTrace.EndFunction()return M end;function table.havesamecontent(O,P)Daneel.Debug.StackTrace.BeginFunction("table.havesamecontent",O,P)local f="table.havesamecontent( table1, table2 ) : "Daneel.Debug.CheckArgType(O,"table1","table",f)Daneel.Debug.CheckArgType(P,"table2","table",f)if table.getlength(O)~=table.getlength(P)then Daneel.Debug.StackTrace.EndFunction()return false end;local Q=true;for B,h in pairs(O)do if O[B]~=P[B]then Q=false;break end end;Daneel.Debug.StackTrace.EndFunction()return Q end;function table.combine(R,S,T)Daneel.Debug.StackTrace.BeginFunction("table.combine",R,S,T)local f="table.combine( keys, values[, returnFalseIfNotSameLength] ) : "Daneel.Debug.CheckArgType(R,"keys","table",f)Daneel.Debug.CheckArgType(S,"values","table",f)Daneel.Debug.CheckOptionalArgType(T,"returnFalseIfNotSameLength","boolean",f)if table.getlength(R)~=table.getlength(S)then if Daneel.Config.debug.enableDebug then print(f.."WARNING : Arguments 'keys' and 'values' have different length.")end;if T then Daneel.Debug.StackTrace.EndFunction()return false end end;local A={}for l,B in ipairs(R)do A[B]=S[l]end;Daneel.Debug.StackTrace.EndFunction()return A end;function table.removevalue(k,h,U)Daneel.Debug.StackTrace.BeginFunction("table.removevalue",k,h,U)local f="table.removevalue( table, value[, maxRemoveCount] ) : "Daneel.Debug.CheckArgType(k,"table","table",f)Daneel.Debug.CheckOptionalArgType(U,"maxRemoveCount","number",f)if h==nil and Daneel.Config.debug.enableDebug then print("WARNING : "..f.."Argument 2 'value' is nil. Provided table is '"..tostring(k).."'")end;local V=0;for B,D in pairs(k)do if D==h then if math.isinteger(B)then table.remove(k,B)else k[B]=nil end;V=V+1;if U~=nil and V==U then break end end end;Daneel.Debug.StackTrace.EndFunction()return V end;function table.getkeys(k)Daneel.Debug.StackTrace.BeginFunction("table.getkeys",k)local f="table.getkeys( table ) : "Daneel.Debug.CheckArgType(k,"table","table",f)local R={}for B,h in pairs(k)do table.insert(R,B)end;Daneel.Debug.StackTrace.EndFunction()return R end;function table.getvalues(k)Daneel.Debug.StackTrace.BeginFunction("table.getvalues",k)local f="table.getvalues( t ) : "Daneel.Debug.CheckArgType(k,"table","table",f)local S={}for B,h in pairs(k)do table.insert(S,h)end;Daneel.Debug.StackTrace.EndFunction()return S end;function table.getkey(k,h)Daneel.Debug.StackTrace.BeginFunction("table.getkey",k,h)local f="table.getkey( table, value ) : "Daneel.Debug.CheckArgType(k,"table","table",f)if h==nil then error(f.."Argument 'value' is nil.")end;local B=nil;for W,X in pairs(k)do if h==X then B=W end end;Daneel.Debug.StackTrace.EndFunction()return B end;function table.sortby(k,Y,Z)Daneel.Debug.StackTrace.BeginFunction("table.sortby",k,Y,Z)local f="table.sortby( table, property[, orderBy] ) : "Daneel.Debug.CheckArgType(k,"table","table",f)Daneel.Debug.CheckArgType(Y,"property","string",f)Daneel.Debug.CheckOptionalArgType(Z,"orderBy","string",f)if Z==nil or not(Z=="asc"or Z=="desc")then Z="asc"end;local _={}local a0={}for l,a1 in ipairs(k)do local a2=a1[Y]table.insert(_,a2)if a0[a2]==nil then a0[a2]={}end;table.insert(a0[a2],a1)end;if Z=="desc"then table.sort(_,function(b,c)return b>c end)else table.sort(_)end;k={}for l,a2 in ipairs(_)do for a3,a1 in pairs(a0[a2])do table.insert(k,a1)end end;Daneel.Debug.StackTrace.EndFunction()return k end;function table.getvalue(k,R)Daneel.Debug.StackTrace.BeginFunction("table.getvalue",k,R)local f="table.getvalue( table, keys ) : "Daneel.Debug.CheckArgType(k,"table","table",f)Daneel.Debug.CheckArgType(R,"keys","string",f)R=string.split(R,".")local h=k;if h==_G then local a4=false;for B,h in pairs(_G)do if B==R[1]then a4=true;break end end;if not a4 then Daneel.Debug.StackTrace.EndFunction()return nil end end;for l,B in ipairs(R)do if h[B]==nil then h=nil;break else h=h[B]end end;Daneel.Debug.StackTrace.EndFunction()return h end;function table.isarray(k,a5)Daneel.Debug.StackTrace.BeginFunction("table.isarray",k)local f="table.isarray( table ) : "Daneel.Debug.CheckArgType(k,"table","table",f)a5=Daneel.Debug.CheckOptionalArgType(a5,"strict","boolean",f,true)local a6=true;local a7=0;for W,X in pairs(k)do a7=a7+1;if a6 and type(W)~="number"or not math.isinteger(W)then a6=false end end;if a6 and a5 then a6=a7==#k end;Daneel.Debug.StackTrace.EndFunction()return a6 end;function table.reverse(k)Daneel.Debug.StackTrace.BeginFunction("table.reverse",k)local f="table.reverse( table ) : "Daneel.Debug.CheckArgType(k,"table","table",f)local H=#k;local A={}for l,X in ipairs(k)do table.insert(A,1,X)end;Daneel.Debug.StackTrace.EndFunction()return A end;function table.shift(k,a8)Daneel.Debug.StackTrace.BeginFunction("table.shift",k,a8)local f="table.shift( table[, returnKey] ) : "Daneel.Debug.CheckArgType(k,"table","table",f)a8=Daneel.Debug.CheckOptionalArgType(a8,"returnKey","boolean",f,false)local B=nil;local h=nil;if table.isarray(k)then if#k>0 then h=table.removevalue(k,1)if h~=nil then B=1 end end else for W,X in pairs(k)do B=W;h=X;break end;if B~=nil then k[B]=nil end end;Daneel.Debug.StackTrace.EndFunction()if a8 then return B,h else return h end end;function table.reindex(k)Daneel.Debug.StackTrace.BeginFunction("table.reindex",k)local f="table.reindex( table ) : "Daneel.Debug.CheckArgType(k,"table","table",f)local A={}if not table.isarray(k,false)then if Daneel.Config.debug.enableDebug then print(f.."Provided table '"..tostring(k).."' is not an array.")end else local a9=1;for l,X in pairs(k)do if l>a9 then a9=l end end;for l=1,a9 do if k[l]~=nil then table.insert(A,k[l])end end end;Daneel.Debug.StackTrace.EndFunction()return A end;Daneel={}Daneel.Utilities={}function Daneel.Utilities.CaseProof(aa,ab)Daneel.Debug.StackTrace.BeginFunction("Daneel.Utilities.CaseProof",aa,ab)local f="Daneel.Utilities.CaseProof( name, set ) : "Daneel.Debug.CheckArgType(aa,"name","string",f)Daneel.Debug.CheckArgType(ab,"set",{"string","table"},f)if type(ab)=="string"then ab={ab}end;local ac=aa:lower()for l,ad in pairs(ab)do if ac==ad:lower()then aa=ad;break end end;Daneel.Debug.StackTrace.EndFunction()return aa end;function Daneel.Utilities.ReplaceInString(string,ae)Daneel.Debug.StackTrace.BeginFunction("Daneel.Utilities.ReplaceInString",string,ae)local f="Daneel.Utilities.ReplaceInString( string, replacements ) : "Daneel.Debug.CheckArgType(string,"string","string",f)Daneel.Debug.CheckArgType(ae,"replacements","table",f)for af,ag in pairs(ae)do string=string:gsub(":"..af,ag)end;Daneel.Debug.StackTrace.EndFunction()return string end;function Daneel.Utilities.AllowDynamicGettersAndSetters(Object,ah)function Object.__index(ai,B)local aj=B;if type(B)=="string"then aj=string.ucfirst(B)end;if B==aj then if Object[B]~=nil then return Object[B]end;if ah~=nil then for l,ak in ipairs(ah)do if ak[B]~=nil then return ak[B]end end end else local al="Get"..aj;if Object[al]~=nil then return Object[al](ai)elseif Object[B]~=nil then return Object[B]end;if ah~=nil then for l,ak in ipairs(ah)do if ak[al]~=nil then return ak[al](ai)elseif ak[B]~=nil then return ak[B]end end end end;return nil end;function Object.__newindex(ai,B,h)local aj=B;if type(B)=="string"then aj=string.ucfirst(B)end;if B~=aj then local al="Set"..aj;if Object[al]~=nil then return Object[al](ai,h)end end;return rawset(ai,B,h)end end;function Daneel.Utilities.ToNumber(am)Daneel.Debug.StackTrace.BeginFunction("Daneel.Utilities.ToNumber",am)local f="Daneel.Utilities.ToNumber( data ) : "if am==nil then error(f.."Argument 1 'data' is nil.")end;local a=tonumber(am)if a==nil then am=tostring(am)local s="(%d+)"if am:find(".",1,true)then s="(%d+%.%d+)"end;a=am:match(am:gsub(s,"(%1)"))a=tonumber(a)end;Daneel.Debug.StackTrace.EndFunction()return a end;function Daneel.Utilities.ButtonExists(an)Daneel.Debug.StackTrace.BeginFunction("Daneel.Utilities.ButtonExists",an)local f="Daneel.Utilities.ButtonExists( buttonName ) : "Daneel.Debug.CheckArgType(an,"buttonName","string",f)local ao=Daneel.Debug.Try(function()CS.Input.WasButtonJustPressed(an)end)Daneel.Debug.StackTrace.EndFunction()return ao end;Daneel.Debug={}function Daneel.Debug.CheckArgType(ap,aq,ar,as)if type(ap)=="table"and getmetatable(ap)==GameObject and ap.inner==nil then error(as.."Provided argument '"..aq.."' is a destroyed game object '"..tostring(ap))end;if not Daneel.Config.debug.enableDebug then return Daneel.Debug.GetType(ap)end;local f="Daneel.Debug.CheckArgType(argument, argumentName, expectedArgumentTypes[, p_errorHead]) : "local N=type(aq)if N~="string"then error(f.."Argument 'argumentName' is of type '"..N.."' with value '"..tostring(aq).."' instead of 'string'.")end;N=type(ar)if N~="string"and N~="table"then error(f.."Argument 'expectedArgumentTypes' is of type '"..N.."' with value '"..tostring(ar).."' instead of 'string' or 'table'.")end;if N=="string"then ar={ar}elseif#ar<=0 then error(f.."Argument 'expectedArgumentTypes' is an empty table.")end;N=type(as)if N~="nil"and N~="string"then error(f.."Argument 'p_errorHead' is of type '"..N.."' with value '"..tostring(as).."' instead of 'string'.")end;if as==nil then as=""end;N=Daneel.Debug.GetType(ap)local at=type(ap)for l,au in ipairs(ar)do if N==au or at==au then return au end end;error(as.."Argument '"..aq.."' is of type '"..N.."' with value '"..tostring(ap).."' instead of '"..table.concat(ar,"', '").."'.")end;function Daneel.Debug.CheckOptionalArgType(ap,aq,ar,as,av)if ap==nil then return av end;if not Daneel.Config.debug.enableDebug then return ap end;local f="Daneel.Debug.CheckOptionalArgType(argument, argumentName, expectedArgumentTypes[, p_errorHead, defaultValue]) : "local N=type(aq)if N~="string"then error(f.."Argument 'argumentName' is of type '"..N.."' with value '"..tostring(aq).."' instead of 'string'.")end;N=type(ar)if N~="string"and N~="table"then error(f.."Argument 'expectedArgumentTypes' is of type '"..N.."' with value '"..tostring(ar).."' instead of 'string' or 'table'.")end;if N=="string"then ar={ar}elseif#ar<=0 then error(f.."Argument 'expectedArgumentTypes' is an empty table.")end;N=type(as)if N~="nil"and N~="string"then error(f.."Argument 'p_errorHead' is of type '"..N.."' with value '"..tostring(as).."' instead of 'string'.")end;if as==nil then f=""end;N=Daneel.Debug.GetType(ap)local at=type(ap)for l,au in ipairs(ar)do if N==au or at==au then return ap end end;error(as.."Optional argument '"..aq.."' is of type '"..N.."' with value '"..tostring(ap).."' instead of '"..table.concat(ar,"', '").."'.")end;function Daneel.Debug.GetType(aw,ax)local f="Daneel.Debug.GetType( object[, luaTypeOnly] ) : "local N=type(ax)if N~="nil"and N~="boolean"then error(f.."Argument 'luaTypeOnly' is of type '"..N.."' with value '"..tostring(ax).."' instead of 'boolean'.")end;if ax==nil then ax=false end;N=type(aw)if not ax and N=="table"then local C=getmetatable(aw)if C~=nil then if getmetatable(C)==Script then return"ScriptedBehavior"end;if Daneel.Config.objects~=nil then for type,aw in pairs(Daneel.Config.objects)do if C==aw then return type end end end;for type,aw in pairs(_G)do if C==aw then return type end end end end;return N end;local ay=error;function Daneel.Debug.SetNewError()function error(az,aA)if Daneel.Config.debug.enableDebug and aA~=true then Daneel.Debug.StackTrace.Print()end;ay(az)end end;function Daneel.Debug.Disable(aB)if aB~=nil then aB=" : "..tostring(aB)end;print("Daneel.Debug.Disable()"..aB)error=ay;Daneel.Config.debug.enableDebug=false end;function Daneel.Debug.ToRawString(am)if am==nil and Daneel.Config.debug.enableDebug then print("WARNING : Daneel.Debug.ToRawString( data ) : Argument 'data' is nil.")return nil end;local aC=nil;local C=getmetatable(am)if C~=nil then if C.__tostring~=nil then local aD=C.__tostring;C.__tostring=nil;aC=tostring(am)C.__tostring=aD end end;if aC==nil then aC=tostring(am)end;return aC end;function Daneel.Debug.GetNameFromValue(h)Daneel.Debug.StackTrace.BeginFunction("Daneel.Debug.GetNameFromValue",h)local f="Daneel.Debug.GetNameFromValue(value) : "if h==nil then error(f.." Argument 'value' is nil.")end;local aE=table.getkey(Daneel.Config.objects,h)if aE==nil then aE=table.getkey(_G,h)end;Daneel.Debug.StackTrace.EndFunction()return aE end;function Daneel.Debug.CheckArgValue(ap,aq,aF,as,av)Daneel.Debug.StackTrace.BeginFunction("Daneel.Debug.CheckArgValue",ap,aq,aF,as)local f="Daneel.Debug.CheckArgValue(argument, argumentName, expectedArgumentValues[, p_errorHead, defaultValue]) : "Daneel.Debug.CheckArgType(aq,"argumentName","string",f)if aF==nil then error(f.."Argument 'expectedArgumentValues' is nil.")end;Daneel.Debug.CheckOptionalArgType(as,"p_errorHead","string",f)if type(aF)~="table"then aF={aF}elseif#aF==0 then error(f.."Argument 'expectedArgumentValues' is an empty table.")end;local aG=false;if type(ap)=="string"then for l,aH in ipairs(aF)do if ap:lower()==aH:lower()then ap=aH;aG=true;break end end else for l,aH in ipairs(aF)do if ap==aH then aG=true;break end end end;if not aG then if av~=nil then ap=av else for l,h in ipairs(aF)do aF[l]=tostring(h)end;error(as.."The value '"..tostring(ap).."' of argument '"..aq.."' is not one of '"..table.concat(aF,"', '").."'.")end end;Daneel.Debug.StackTrace.EndFunction()return ap end;local aI=Behavior;Daneel.Debug.tryGameObject=nil;function Daneel.Debug.Try(aJ)Daneel.Debug.StackTrace.BeginFunction("Daneel.Debug.Try",aJ)local f="Daneel.Debug.Try( _function ) : "Daneel.Debug.CheckArgType(aJ,"_function",{"function","userdata"},f)local gameObject=Daneel.Debug.tryGameObject;if gameObject==nil or gameObject.inner==nil then gameObject=CraftStudio.CreateGameObject("Daneel_Debug_Try")Daneel.Debug.tryGameObject=gameObject end;local aK=false;gameObject:CreateScriptedBehavior(aI,{debugTry=true,testFunction=aJ,successCallback=function()aK=true end})Daneel.Debug.StackTrace.EndFunction()return aK end;Daneel.Debug.StackTrace={messages={}}function Daneel.Debug.StackTrace.BeginFunction(aL,...)if not Daneel.Config.debug.enableDebug or not Daneel.Config.debug.enableStackTrace then return end;if#Daneel.Debug.StackTrace.messages>200 then print("WARNING : your StackTrace is more than 200 items long ! Emptying the StackTrace now. Did you forget to write a 'EndFunction()' somewhere ?")Daneel.Debug.StackTrace.messages={}end;local f="Daneel.Debug.StackTrace.BeginFunction( functionName[, ...] ) : "Daneel.Debug.CheckArgType(aL,"functionName","string",f)local aM=aL.."( "local L={...}if#L>0 then for l,ap in ipairs(L)do if type(ap)=="string"then aM=aM..'"'..tostring(ap)..'", 'else aM=aM..tostring(ap)..", "end end;aM=aM:sub(1,#aM-2)end;aM=aM.." )"table.insert(Daneel.Debug.StackTrace.messages,aM)end;function Daneel.Debug.StackTrace.EndFunction()if not Daneel.Config.debug.enableDebug or not Daneel.Config.debug.enableStackTrace then return end;table.remove(Daneel.Debug.StackTrace.messages)end;function Daneel.Debug.StackTrace.Print()if not Daneel.Config.debug.enableDebug or not Daneel.Config.debug.enableStackTrace then return end;local messages=Daneel.Debug.StackTrace.messages;Daneel.Debug.StackTrace.messages={}print("~~~~~ Daneel.Debug.StackTrace ~~~~~")if#messages<=0 then print("No message in the StackTrace.")else for l,aM in ipairs(messages)do if l<10 then l="0"..l end;print("#"..l.." "..aM)end end end;Daneel.Event={events={},persistentEvents={}}function Daneel.Event.Listen(aN,aO,aP)Daneel.Debug.StackTrace.BeginFunction("Daneel.Event.Listen",aN,aO)local f="Daneel.Event.Listen( eventName, functionOrObject ) : "Daneel.Debug.CheckArgType(aN,"eventName",{"string","table"},f)local aQ=Daneel.Debug.CheckArgType(aO,"functionOrObject",{"table","function","userdata"},f)aP=Daneel.Debug.CheckOptionalArgType(aP,"isPersistent","boolean",f,false)local aR=aN;if type(aN)=="string"then aR={aN}end;for l,aN in pairs(aR)do if Daneel.Event.events[aN]==nil then Daneel.Event.events[aN]={}end;if Daneel.Event.persistentEvents[aN]==nil then Daneel.Event.persistentEvents[aN]={}end;if not table.containsvalue(Daneel.Event.events[aN],aO)and not table.containsvalue(Daneel.Event.persistentEvents[aN],aO)then local b,b,an=aN:find("^On(.+)ButtonJustPressed$")if an==nil then b,b,an=aN:find("^On(.+)ButtonJustReleased$")end;if an==nil then b,b,an=aN:find("^On(.+)ButtonDown$")end;if an~=nil and not table.containsvalue(Daneel.Config.hotKeys,an)then if not Daneel.isLoaded then Daneel.LateLoad("Daneel.Event.Listen")end;if Daneel.Utilities.ButtonExists(an)then table.insert(Daneel.Config.hotKeys,an)else if Daneel.Config.debug.enableDebug then print(f.."You tried to listen to the '"..aN.."' event but the '"..an.."' button does not exists in the Game Controls.")end;return end end;if aP and aQ=="table"then local C=getmetatable(aO)if C~=nil and C==GameObject or table.containsvalue(Daneel.Config.componentObjects,C)then if Daneel.Config.debug.enableDebug then print(f.."Game objects and components can't be persistent listeners",aO)end;aP=false end end;local aS=Daneel.Event.events;if aP then aS=Daneel.Event.persistentEvents end;table.insert(aS[aN],aO)end end;Daneel.Debug.StackTrace.EndFunction()end;function Daneel.Event.StopListen(aN,aO)if type(aN)~="string"then aO=aN;aN=nil end;Daneel.Debug.StackTrace.BeginFunction("Daneel.Event.StopListen",aN,aO)local f="Daneel.Event.StopListen( eventName, functionOrObject ) : "Daneel.Debug.CheckOptionalArgType(aN,"eventName","string",f)Daneel.Debug.CheckArgType(aO,"functionOrObject",{"table","function"},f)local aR=aN;if type(aN)=="string"then aR={aN}end;if aR==nil then aR=table.merge(table.getkeys(Daneel.Event.events),table.getkeys(Daneel.Event.persistentEvents))end;for l,aN in pairs(aR)do local aT=Daneel.Event.events[aN]if aT~=nil then table.removevalue(aT,aO)end;aT=Daneel.Event.persistentEvents[aN]if aT~=nil then table.removevalue(aT,aO)end end;Daneel.Debug.StackTrace.EndFunction()end;function Daneel.Event.Fire(aw,aN,...)local L={...}Daneel.Debug.StackTrace.BeginFunction("Daneel.Event.Fire",aw,aN,...)local f="Daneel.Event.Fire( [object, ]eventName[, ...] ) : "local N=type(aw)if N=="string"or N=="nil"then if aN~=nil then table.insert(L,1,aN)end;aN=aw;aw=nil else Daneel.Debug.CheckArgType(aw,"object","table",f)Daneel.Debug.CheckArgType(aN,"eventName","string",f)end;local aT={aw}if aw==nil then if Daneel.Event.events[aN]~=nil then aT=Daneel.Event.events[aN]end;if Daneel.Event.persistentEvents[aN]~=nil then aT=table.merge(aT,Daneel.Event.persistentEvents[aN])end end;local aU={}for l,aV in ipairs(aT)do local aQ=type(aV)if aQ=="function"or aQ=="userdata"then if aV(unpack(L))==false then table.insert(aU,aV)end else local C=getmetatable(aV)if aV.isDestroyed~=true or C==GameObject and aV.inner~=nil then local az=aN;local aW=rawget(aV,aN)local aX=type(aW)if aX=="function"or aX=="userdata"then if aW(unpack(L))==false then table.insert(aU,aV)end elseif aX=="string"then az=aW end;if C==GameObject then aV:SendMessage(az,L)end end end end;if#aU>0 then for l,aV in pairs(aU)do Daneel.Event.StopListen(aN,aV)end end;Daneel.Debug.StackTrace.EndFunction()end;Daneel.Time={}CS.DaneelModules['Time']=Daneel.Time;function Daneel.Time.Load()setmetatable(Daneel.Time,nil)Daneel.Time={realTime=0.0,realDeltaTime=0.0,time=0.0,deltaTime=0.0,timeScale=1.0,frameCount=0}end;local C={__index=function(ai,B)setmetatable(Daneel.Time,nil)if not Daneel.isLoaded then Daneel.LateLoad("Daneel.Time __index")end;return Daneel.Time[B]end,__newindex=function(ai,B,h)setmetatable(Daneel.Time,nil)if not Daneel.isLoaded then Daneel.LateLoad("Daneel.Time __newindex")end;Daneel.Time[B]=h end}setmetatable(Daneel.Time,C)Daneel.Cache={ucfirst={},lcfirst={},id=0}function Daneel.Cache.GetId(aw)if aw~=nil and type(aw)=="table"then local id=rawget(aw,"id")if id~=nil then return id end;id=Daneel.Cache.GetId()if aw.inner~=nil and not CS.IsWebPlayer then id=tonumber(tostring(aw.inner):match("%d+"))end;if id==nil then id="[no id]"end;rawset(aw,"id",id)return id else Daneel.Cache.id=Daneel.Cache.id+1;return Daneel.Cache.id end end;Daneel.Storage={}function Daneel.Storage.Save(aa,am,aY)Daneel.Debug.StackTrace.BeginFunction("Daneel.Storage.Save",aa,am)local f="Daneel.Storage.Save( name, data ) : "Daneel.Debug.CheckArgType(aa,"name","string",f)Daneel.Debug.CheckOptionalArgType(aY,"callback","function",f)if am~=nil and type(am)~="table"then am={value=am,isSavedByDaneel=true}end;CS.Storage.Save(aa,am,function(error)if error~=nil then if Daneel.Config.debug.enableDebug then print(f.."Error saving with name, data and error : ",aa,am,error.message)end end;if aY~=nil then if error==nil then error={}end;aY(error.message)end end)Daneel.Debug.StackTrace.EndFunction()end;function Daneel.Storage.Load(aa,av,aY)Daneel.Debug.StackTrace.BeginFunction("Daneel.Storage.Load",aa,av)local f="Daneel.Storage.Load( name, defaultValue ) : "Daneel.Debug.CheckArgType(aa,"name","string",f)if aY==nil and type(av)=="function"then aY=av;av=nil end;Daneel.Debug.CheckOptionalArgType(aY,"callback","function",f)local h=nil;CS.Storage.Load(aa,function(error,am)if error~=nil then if Daneel.Config.debug.enableDebug then print(f.."Error loading with name, default value and error",aa,av,error.message)end;am=nil end;h=av;if am~=nil then if am.value~=nil and am.isSavedByDaneel then h=am.value else h=am end end;if aY~=nil then if error==nil then error={}end;aY(h,error.message)end end)Daneel.Debug.StackTrace.EndFunction()return h end;setmetatable(Vector3,{__call=function(Object,...)return Object:New(...)end})setmetatable(Quaternion,{__call=function(Object,...)return Object:New(...)end})setmetatable(Plane,{__call=function(Object,...)return Object:New(...)end})Asset={}Asset.__index=Asset;setmetatable(Asset,{__call=function(Object,...)return Object.Get(...)end})local aZ={"string"}function Asset.Get(a_,b0,b1)Daneel.Debug.StackTrace.BeginFunction("Asset.Get",a_,b0,b1)local f="Asset.Get( assetPath[, assetType, errorIfAssetNotFound] ) : "if#aZ==1 and Daneel.Config.assetTypes~=nil then aZ=table.merge(aZ,Daneel.Config.assetTypes)end;local N=Daneel.Debug.CheckArgType(a_,"assetPath",aZ,f)if b0~=nil then Daneel.Debug.CheckArgType(b0,"assetType","string",f)b0=Daneel.Debug.CheckArgValue(b0,"assetType",Daneel.Config.assetTypes,f)end;if table.containsvalue(Daneel.Config.assetTypes,N)then if b0~=nil and N~=b0 then error(f.."Provided asset '"..a_.."' has a different type '"..N.."' than the provided 'assetType' argument '"..b0 .."'.")end;Daneel.Debug.StackTrace.EndFunction()return a_ end;Daneel.Debug.CheckOptionalArgType(b1,"errorIfAssetNotFound","boolean",f)local b2=a_;if Daneel.Config.scriptPaths[b2]~=nil then a_=Daneel.Config.scriptPaths[b2]b0="Script"end;local b3=nil;if b0==nil then b3=CraftStudio.FindAsset(a_)else b3=CraftStudio.FindAsset(a_,b0)end;if b3==nil and b1 then if b0==nil then b0="asset"end;error(f.."Argument 'assetPath' : "..b0 .." with name '"..a_.."' was not found.")end;Daneel.Debug.StackTrace.EndFunction()return b3 end;function Asset.GetPath(b3)Daneel.Debug.StackTrace.BeginFunction("Asset.GetPath",b3)local f="Asset.GetPath( asset ) : "Daneel.Debug.CheckArgType(b3,"asset",Daneel.Config.assetTypes,f)local b4=Map.GetPathInPackage(b3)Daneel.Debug.StackTrace.EndFunction()return b4 end;function Asset.GetName(b3)Daneel.Debug.StackTrace.BeginFunction("Asset.GetName",b3)local f="Asset.GetName( asset ) : "Daneel.Debug.CheckArgType(b3,"asset",Daneel.Config.assetTypes,f)local aa=Asset.GetPath(b3):gsub("^(.*/)","")rawset(b3,"name",aa)Daneel.Debug.StackTrace.EndFunction()return aa end;function Asset.GetId(b3)return Daneel.Cache.GetId(b3)end;local b5=Map.GetPathInPackage;function Map.GetPathInPackage(b3)local b4=rawget(b3,"path")if b4==nil then b4=b5(b3)end;return b4 end;local b6=Map.LoadFromPackage;function Map.LoadFromPackage(b4,aY)b6(b4,function(b7)if b7~=nil then rawset(b7,"path",b4)end;aY(b7)end)end;Component={}Component.__index=Component;function Component.Set(b8,b9)Daneel.Debug.StackTrace.BeginFunction("Component.Set",b8,b9)local f="Component.Set(component, params) : "Daneel.Debug.CheckArgType(b8,"component",Daneel.Config.componentTypes,f)Daneel.Debug.CheckArgType(b9,"params","table",f)for B,h in pairs(b9)do b8[B]=h end;Daneel.Debug.StackTrace.EndFunction()end;function Component.Destroy(b8)Daneel.Debug.StackTrace.BeginFunction("Component.Destroy",b8)local f="Component.Destroy( component ) : "Daneel.Debug.CheckArgType(b8,"component",Daneel.Config.componentTypes,f)table.removevalue(b8.gameObject,b8)CraftStudio.Destroy(b8)Daneel.Debug.StackTrace.EndFunction()end;function Component.GetId(b8)return Daneel.Cache.GetId(b8)end;local ba=Transform.SetLocalScale;function Transform.SetLocalScale(bb,bc)Daneel.Debug.StackTrace.BeginFunction("Transform.SetLocalScale",bb,bc)local f="Transform.SetLocalScale(transform, scale) : "Daneel.Debug.CheckArgType(bb,"transform","Transform",f)local N=Daneel.Debug.CheckArgType(bc,"scale",{"number","Vector3"},f)if N=="number"then bc=Vector3:New(bc)end;ba(bb,bc)Daneel.Debug.StackTrace.EndFunction()end;function Transform.SetScale(bb,bc)Daneel.Debug.StackTrace.BeginFunction("Transform.SetScale",bb,bc)local f="Transform.SetScale(transform, scale) : "Daneel.Debug.CheckArgType(bb,"transform","Transform",f)local N=Daneel.Debug.CheckArgType(bc,"scale",{"number","Vector3"},f)if N=="number"then bc=Vector3:New(bc)end;local bd=bb.gameObject:GetParent()if bd~=nil then bc=bc/bd.transform:GetScale()end;bb:SetLocalScale(bc)Daneel.Debug.StackTrace.EndFunction()end;function Transform.GetScale(bb)Daneel.Debug.StackTrace.BeginFunction("Transform.GetScale",bb)local f="Transform.GetScale(transform) : "Daneel.Debug.CheckArgType(bb,"transform","Transform",f)local bc=bb:GetLocalScale()local bd=bb.gameObject:GetParent()if bd~=nil then bc=bc*bd.transform:GetScale()end;Daneel.Debug.StackTrace.EndFunction()return bc end;local be=ModelRenderer.SetModel;function ModelRenderer.SetModel(bf,bg)Daneel.Debug.StackTrace.BeginFunction("ModelRenderer.SetModel",bf,bg)local f="ModelRenderer.SetModel( modelRenderer[, modelNameOrAsset] ) : "Daneel.Debug.CheckArgType(bf,"modelRenderer","ModelRenderer",f)Daneel.Debug.CheckOptionalArgType(bg,"modelNameOrAsset",{"string","Model"},f)local bh=nil;if bg~=nil then bh=Asset.Get(bg,"Model",true)end;be(bf,bh)Daneel.Debug.StackTrace.EndFunction()end;local bi=ModelRenderer.SetAnimation;function ModelRenderer.SetAnimation(bf,bj)Daneel.Debug.StackTrace.BeginFunction("ModelRenderer.SetAnimation",bf,bj)local f="ModelRenderer.SetAnimation( modelRenderer[, animationNameOrAsset] ) : "Daneel.Debug.CheckArgType(bf,"modelRenderer","ModelRenderer",f)Daneel.Debug.CheckOptionalArgType(bj,"animationNameOrAsset",{"string","ModelAnimation"},f)local bk=nil;if bj~=nil then bk=Asset.Get(bj,"ModelAnimation",true)end;bi(bf,bk)Daneel.Debug.StackTrace.EndFunction()end;function ModelRenderer.Set(bf,b9)Daneel.Debug.StackTrace.BeginFunction("ModelRenderer.Set",bf,b9)local f="ModelRenderer.Set( modelRenderer, params ) : "Daneel.Debug.CheckArgType(bf,"modelRenderer","ModelRenderer",f)Daneel.Debug.CheckArgType(b9,"params","table",f)if b9.model~=nil then bf:SetModel(b9.model)b9.model=nil end;if b9.animationTime~=nil and b9.animation~=nil then bf:SetAnimation(b9.animation)b9.animation=nil end;Component.Set(bf,b9)Daneel.Debug.StackTrace.EndFunction()end;local bl=MapRenderer.SetMap;function MapRenderer.SetMap(bm,bn,bo)Daneel.Debug.StackTrace.BeginFunction("MapRenderer.SetMap",bm,bn,bo)local f="MapRenderer.SetMap( mapRenderer[, mapNameOrAsset, replaceTileSet] ) : "Daneel.Debug.CheckArgType(bm,"mapRenderer","MapRenderer",f)Daneel.Debug.CheckOptionalArgType(bn,"mapNameOrAsset",{"string","Map"},f)Daneel.Debug.CheckOptionalArgType(bo,"replaceTileSet","boolean",f)local b7=nil;if bn~=nil then b7=Asset.Get(bn,"Map",true)end;if bo~=nil then bl(bm,b7,bo)else bl(bm,b7)end;Daneel.Debug.StackTrace.EndFunction()end;local bp=MapRenderer.SetTileSet;function MapRenderer.SetTileSet(bm,bq)Daneel.Debug.StackTrace.BeginFunction("MapRenderer.SetTileSet",bm,bq)local f="MapRenderer.SetTileSet( mapRenderer[, tileSetNameOrAsset] ) : "Daneel.Debug.CheckArgType(bm,"mapRenderer","MapRenderer",f)Daneel.Debug.CheckOptionalArgType(bq,"tileSetNameOrAsset",{"string","TileSet"},f)local br=nil;if bq~=nil then br=Asset.Get(bq,"TileSet",true)end;bp(bm,br)Daneel.Debug.StackTrace.EndFunction()end;function MapRenderer.Set(bm,b9)Daneel.Debug.StackTrace.BeginFunction("MapRenderer.Set",bm,b9)local f="MapRenderer.Set( mapRenderer, params ) : "Daneel.Debug.CheckArgType(bm,"mapRenderer","MapRenderer",f)Daneel.Debug.CheckArgType(b9,"params","table",f)if b9.map~=nil then bm:SetMap(b9.map)b9.map=nil end;Component.Set(bm,b9)Daneel.Debug.StackTrace.EndFunction()end;local bs=TextRenderer.SetFont;function TextRenderer.SetFont(textRenderer,bt)Daneel.Debug.StackTrace.BeginFunction("TextRenderer.SetFont",textRenderer,bt)local f="TextRenderer.SetFont( textRenderer[, fontNameOrAsset] ) : "Daneel.Debug.CheckArgType(textRenderer,"textRenderer","TextRenderer",f)Daneel.Debug.CheckOptionalArgType(bt,"fontNameOrAsset",{"string","Font"},f)local bu=nil;if bt~=nil then bu=Asset.Get(bt,"Font",true)end;bs(textRenderer,bu)Daneel.Debug.StackTrace.EndFunction()end;local bv=TextRenderer.SetAlignment;function TextRenderer.SetAlignment(textRenderer,alignment)Daneel.Debug.StackTrace.BeginFunction("TextRenderer.SetAlignment",textRenderer,alignment)local f="TextRenderer.SetAlignment(textRenderer, alignment) : "Daneel.Debug.CheckArgType(textRenderer,"textRenderer","TextRenderer",f)local N=Daneel.Debug.CheckArgType(alignment,"alignment",{"string","userdata","number"},f)if N=="string"then local bw="Center"if Daneel.Config.textRenderer~=nil and Daneel.Config.textRenderer.alignment~=nil then bw=Daneel.Config.textRenderer.alignment end;alignment=Daneel.Debug.CheckArgValue(alignment,"alignment",{"Left","Center","Right"},f,bw)alignment=TextRenderer.Alignment[alignment]end;bv(textRenderer,alignment)Daneel.Debug.StackTrace.EndFunction()end;function TextRenderer.SetTextWidth(textRenderer,bx)Daneel.Debug.StackTrace.BeginFunction("TextRenderer.SetTextWidth",textRenderer,bx)local f="TextRenderer.SetTextWidth(textRenderer, width) : "Daneel.Debug.CheckArgType(textRenderer,"textRenderer","TextRenderer",f)local N=Daneel.Debug.CheckArgType(bx,"width","number",f)local by=textRenderer:GetTextWidth()/textRenderer.gameObject.transform:GetScale()textRenderer.gameObject.transform:SetScale(bx/by)Daneel.Debug.StackTrace.EndFunction()end;local bz=Camera.SetProjectionMode;function Camera.SetProjectionMode(camera,projectionMode)Daneel.Debug.StackTrace.BeginFunction("Camera.SetProjectionMode",camera,projectionMode)local f="Camera.SetProjectionMode( camera, projectionMode ) : "Daneel.Debug.CheckArgType(camera,"camera","Camera",f)local N=Daneel.Debug.CheckArgType(projectionMode,"projectionMode",{"string","userdata","number"},f)if N=="string"then local bw="Perspective"if Daneel.Config.camera~=nil and Daneel.Config.camera.projectionMode~=nil then bw=Daneel.Config.camera.projectionMode end;projectionMode=Daneel.Debug.CheckArgValue(projectionMode,"projectionMode",{"Perspective","Orthographic"},f,bw)projectionMode=Camera.ProjectionMode[projectionMode]end;bz(camera,projectionMode)Daneel.Debug.StackTrace.EndFunction()end;function Camera.Set(camera,b9)Daneel.Debug.StackTrace.BeginFunction("Camera.Set",camera,b9)local f="Camera.Set( camera, params ) : "Daneel.Debug.CheckArgType(camera,"camera","Camera",f)Daneel.Debug.CheckArgType(b9,"params","table",f)if b9.projectionMode~=nil then camera:SetProjectionMode(b9.projectionMode)b9.projectionMode=nil end;Component.Set(camera,b9)Daneel.Debug.StackTrace.EndFunction()end;setmetatable(Ray,{__call=function(Object,...)return Object:New(...)end})function Ray.Cast(bA,bB,bC)Daneel.Debug.StackTrace.BeginFunction("Ray.Cast",bA,bB,bC)local f="Ray.Cast( ray, gameObjects[, sortByDistance] ) : "Daneel.Debug.CheckArgType(bA,"ray","Ray",f)Daneel.Debug.CheckArgType(bB,"gameObjects","table",f)Daneel.Debug.CheckOptionalArgType(bC,"sortByDistance","boolean",f)local bD={}for l,gameObject in pairs(bB)do if gameObject.inner~=nil then local bE=bA:IntersectsGameObject(gameObject)if bE~=nil then table.insert(bD,bE)end end end;if bC==true then bD=table.sortby(bD,"distance")end;Daneel.Debug.StackTrace.EndFunction()return bD end;function Ray.IntersectsGameObject(bA,bF)Daneel.Debug.StackTrace.BeginFunction("Ray.IntersectsGameObject",bA,bF)local f="Ray.IntersectsGameObject( ray, gameObjectNameOrInstance ) : "Daneel.Debug.CheckArgType(bA,"ray","Ray",f)Daneel.Debug.CheckArgType(bF,"gameObjectNameOrInstance",{"string","GameObject"},f)local gameObject=GameObject.Get(bF,true)local bE=nil;if gameObject.inner==nil then return nil end;local b8=gameObject.modelRenderer;if b8~=nil then bE=bA:IntersectsModelRenderer(b8,true)end;if bE==nil then b8=gameObject.mapRenderer;if b8~=nil then bE=bA:IntersectsMapRenderer(b8,true)end end;if bE==nil then b8=gameObject.textRenderer;if b8~=nil then bE=bA:IntersectsTextRenderer(b8,true)end end;if bE~=nil then bE.gameObject=gameObject end;Daneel.Debug.StackTrace.EndFunction()return bE end;local bG=Ray.IntersectsPlane;function Ray.IntersectsPlane(bA,bH,bI)Daneel.Debug.StackTrace.BeginFunction("Ray.IntersectsPlane",bA,nil,bI)local f="Ray.IntersectsPlane( ray, plane[, returnRaycastHit] ) : "Daneel.Debug.CheckArgType(bA,"ray","Ray",f)bI=Daneel.Debug.CheckOptionalArgType(bI,"returnRaycastHit","boolean",f,false)local bJ=bG(bA,bH)if bI and bJ~=nil then local bE=RaycastHit.New({distance=bJ,hitLocation=bA.position+bA.direction*bJ,hitObject=bH})bJ=bE end;Daneel.Debug.StackTrace.EndFunction()return bJ end;local bK=Ray.IntersectsModelRenderer;function Ray.IntersectsModelRenderer(bA,bf,bI)Daneel.Debug.StackTrace.BeginFunction("Ray.IntersectsModelRenderer",bA,bf,bI)local f="Ray.IntersectsModelRenderer( ray, modelRenderer[, returnRaycastHit] ) : "Daneel.Debug.CheckArgType(bA,"ray","Ray",f)Daneel.Debug.CheckArgType(bf,"modelRenderer","ModelRenderer",f)bI=Daneel.Debug.CheckOptionalArgType(bI,"returnRaycastHit","boolean",f,false)local bJ,bL=bK(bA,bf)if bI and bJ~=nil then local bE=RaycastHit.New({distance=bJ,normal=bL,hitLocation=bA.position+bA.direction*bJ,hitObject=bf,gameObject=bf.gameObject})bJ=bE;bL=nil end;Daneel.Debug.StackTrace.EndFunction()return bJ,bL end;local bM=Ray.IntersectsMapRenderer;function Ray.IntersectsMapRenderer(bA,bm,bI)Daneel.Debug.StackTrace.BeginFunction("Ray.IntersectsMapRenderer",bA,bm,bI)local f="Ray.IntersectsMapRenderer( ray, mapRenderer[, returnRaycastHit] ) : "Daneel.Debug.CheckArgType(bA,"ray","Ray",f)Daneel.Debug.CheckArgType(bm,"mapRenderer","MapRenderer",f)bI=Daneel.Debug.CheckOptionalArgType(bI,"returnRaycastHit","boolean",f,false)local bJ,bL,bN,bO=bM(bA,bm)if bN~=nil then setmetatable(bN,Vector3)end;if bO~=nil then setmetatable(bO,Vector3)end;if bI and bJ~=nil then local bE=RaycastHit.New({distance=bJ,normal=bL,hitBlockLocation=bN,adjacentBlockLocation=bO,hitLocation=bA.position+bA.direction*bJ,hitObject=bm,gameObject=bm.gameObject})bJ=bE;bL=nil;bN=nil;bO=nil end;Daneel.Debug.StackTrace.EndFunction()return bJ,bL,bN,bO end;local bP=Ray.IntersectsTextRenderer;function Ray.IntersectsTextRenderer(bA,textRenderer,bI)Daneel.Debug.StackTrace.BeginFunction("Ray.IntersectsTextRenderer",bA,textRenderer,bI)local f="Ray.IntersectsTextRenderer( ray, textRenderer[, returnRaycastHit] ) : "Daneel.Debug.CheckArgType(bA,"ray","Ray",f)Daneel.Debug.CheckArgType(textRenderer,"textRenderer","TextRenderer",f)bI=Daneel.Debug.CheckOptionalArgType(bI,"returnRaycastHit","boolean",f,false)local bJ,bL=bP(bA,textRenderer)if bI and bJ~=nil then local bE=RaycastHit.New({distance=bJ,normal=bL,hitLocation=bA.position+bA.direction*bJ,hitObject=textRenderer,gameObject=textRenderer.gameObject})Daneel.Debug.StackTrace.EndFunction()return bE end;Daneel.Debug.StackTrace.EndFunction()return bJ,bL end;RaycastHit={}RaycastHit.__index=RaycastHit;setmetatable(RaycastHit,{__call=function(Object,...)return Object.New(...)end})function RaycastHit.__tostring(ai)local aM="RaycastHit: { "local bQ=true;for B,h in pairs(ai)do if bQ then aM=aM..B.."="..tostring(h)bQ=false else aM=aM..", "..B.."="..tostring(h)end end;return aM.." }"end;function RaycastHit.New(am)Daneel.Debug.StackTrace.BeginFunction("RaycastHit.New",am)local f="RaycastHit.New( [data] ) : "am=Daneel.Debug.CheckOptionalArgType(am,"data","table",f,{})local bE=setmetatable(am,RaycastHit)Daneel.Debug.StackTrace.EndFunction()return bE end;function Scene.Load(bR)Daneel.Debug.StackTrace.BeginFunction("Scene.Load",bR)local f="Scene.Load( sceneNameOrAsset ) : "Daneel.Debug.CheckArgType(bR,"sceneNameOrAsset",{"string","Scene"},f)CraftStudio.LoadScene(bR)Daneel.Debug.StackTrace.EndFunction()end;local bS=CraftStudio.LoadScene;function CraftStudio.LoadScene(bR)Daneel.Debug.StackTrace.BeginFunction("CraftStudio.LoadScene",bR)local f="CraftStudio.LoadScene( sceneNameOrAsset ) : "Daneel.Debug.CheckArgType(bR,"sceneNameOrAsset",{"string","Scene"},f)local bT=Asset.Get(bR,"Scene",true)Daneel.Event.Fire("OnSceneLoad",bT)Daneel.Event.events={}Scene.current=bT;Daneel.Debug.StackTrace.EndFunction()bS(bT)end;function Scene.Append(bR,bU)Daneel.Debug.StackTrace.BeginFunction("Scene.Append",bR,bU)local f="Scene.Append( sceneNameOrAsset[, parentNameOrInstance] ) : "Daneel.Debug.CheckArgType(bR,"sceneNameOrAsset",{"string","Scene"},f)Daneel.Debug.CheckOptionalArgType(bU,"parentNameOrInstance",{"string","GameObject"},f)local bT=Asset.Get(bR,"Scene",true)local bd=nil;if bU~=nil then bd=GameObject.Get(bU,true)end;local gameObject=CraftStudio.AppendScene(bT,bd)Daneel.Debug.StackTrace.EndFunction()return gameObject end;local bV=CraftStudio.Destroy;function CraftStudio.Destroy(aw)Daneel.Debug.StackTrace.BeginFunction("CraftStudio.Destroy",aw)if type(aw)=="table"then Daneel.Event.Fire(aw,"OnDestroy",aw)Daneel.Event.StopListen(aw)aw.isDestroyed=true end;bV(aw)Daneel.Debug.StackTrace.EndFunction()end;setmetatable(GameObject,{__call=function(Object,...)return Object.New(...)end})function GameObject.__tostring(gameObject)if rawget(gameObject,"transform")==nil then return"Destroyed gameObject: "..Daneel.Debug.ToRawString(gameObject)end;return"GameObject: "..gameObject:GetId()..": '"..gameObject:GetName().."'"end;function GameObject.__index(gameObject,B)if GameObject[B]~=nil then return GameObject[B]end;local b4=Daneel.Config.scriptPaths[B]if b4~=nil then local bW=gameObject:GetScriptedBehavior(b4)if bW~=nil then rawset(gameObject,B,bW)return bW end end;if type(B)=="string"then local aj=string.ucfirst(B)if B~=aj then local al="Get"..aj;if GameObject[al]~=nil then return GameObject[al](gameObject)end end end;return nil end;function GameObject.__newindex(gameObject,B,h)local aj=B;if type(B)=="string"then aj=string.ucfirst(B)end;if B~=aj and B~="transform"then local al="Set"..aj;if GameObject[al]~=nil then return GameObject[al](gameObject,h)end end;rawset(gameObject,B,h)end;function GameObject.New(aa,b9)Daneel.Debug.StackTrace.BeginFunction("GameObject.New",aa,b9)local f="GameObject.New( name[, params] ) : "local N=Daneel.Debug.CheckArgType(aa,"name",{"string","Scene"},f)Daneel.Debug.CheckOptionalArgType(b9,"params","table",f)local gameObject=nil;local bT=Asset.Get(aa,"Scene")if bT~=nil then gameObject=CraftStudio.AppendScene(bT)else gameObject=CraftStudio.CreateGameObject(aa)end;if b9~=nil and gameObject~=nil then gameObject:Set(b9)end;Daneel.Debug.StackTrace.EndFunction()return gameObject end;function GameObject.Instantiate(bX,bR,b9)Daneel.Debug.StackTrace.BeginFunction("GameObject.Instantiate",bX,bR,b9)local f="GameObject.Instantiate( gameObjectName, sceneNameOrAsset[, params] ) : "Daneel.Debug.CheckArgType(bX,"gameObjectName","string",f)Daneel.Debug.CheckArgType(bR,"sceneNameOrAsset",{"string","Scene"},f)Daneel.Debug.CheckOptionalArgType(b9,"params","table",f)local bT=Asset.Get(bR,"Scene",true)local gameObject=CraftStudio.Instantiate(bX,bT)if b9~=nil then gameObject:Set(b9)end;Daneel.Debug.StackTrace.EndFunction()return gameObject end;function GameObject.Set(gameObject,b9)Daneel.Debug.StackTrace.BeginFunction("GameObject.Set",gameObject,b9)local f="GameObject.Set( gameObject, params ) : "Daneel.Debug.CheckArgType(gameObject,"gameObject","GameObject",f)Daneel.Debug.CheckArgType(b9,"params","table",f)local N=nil;if b9.parent~=nil then gameObject:SetParent(b9.parent)b9.parent=nil end;if b9.transform~=nil then gameObject.transform:Set(b9.transform)b9.transform=nil end;for l,bY in pairs(Daneel.Config.componentTypes)do local b8=nil;if bY~="ScriptedBehavior"then bY=bY:lower()local bZ=nil;for B,h in pairs(b9)do if B:lower()==bY then bZ=h;Daneel.Debug.CheckArgType(bZ,"params."..B,"table",f)break end end;if bZ~=nil then for B,h in pairs(gameObject)do if B:lower()==bY then b8=h;break end end;if b8==nil then b8=gameObject:GetComponent(bY)end;if b8==nil then b8=gameObject:AddComponent(bY)end;b8:Set(bZ)table.removevalue(b9,bZ)end end end;for B,h in pairs(b9)do if Daneel.Config.scriptPaths[B]~=nil or table.containsvalue(Daneel.Config.scriptPaths,B)then local b_=B;if Daneel.Config.scriptPaths[B]~=nil then b_=Daneel.Config.scriptPaths[B]end;local b8=gameObject:GetScriptedBehavior(b_)if b8==nil then b8=gameObject:AddComponent(b_)end;b8:Set(h)elseif B=="tags"then gameObject:RemoveTag()gameObject:AddTag(h)else gameObject[B]=h end end;Daneel.Debug.StackTrace.EndFunction()end;function GameObject.Get(aa,c0)if getmetatable(aa)==GameObject then return aa end;Daneel.Debug.StackTrace.BeginFunction("GameObject.Get",aa,c0)local f="GameObject.Get( name[, errorIfGameObjectNotFound] ) : "Daneel.Debug.CheckArgType(aa,"name","string",f)Daneel.Debug.CheckOptionalArgType(c0,"errorIfGameObjectNotFound","boolean",f)local gameObject=nil;local c1=string.split(aa,".")gameObject=CraftStudio.FindGameObject(c1[1])if gameObject==nil and c0==true then error(f.."GameObject with name '"..c1[1].."' (from '"..aa.."') was not found.")end;if gameObject~=nil then local c2=aa;local c3=table.remove(c1,1)for l,aa in ipairs(c1)do gameObject=gameObject:GetChild(aa)c3=c3 .."."..aa;if gameObject==nil then if c0==true then error(f.."GameObject with name '"..c3 .."' (from '"..c2 .."') was not found.")end;break end end end;Daneel.Debug.StackTrace.EndFunction()return gameObject end;function GameObject.GetId(gameObject)return Daneel.Cache.GetId(gameObject)end;local c4=GameObject.SetParent;function GameObject.SetParent(gameObject,bU,c5)Daneel.Debug.StackTrace.BeginFunction("GameObject.SetParent",gameObject,bU,c5)local f="GameObject.SetParent(gameObject, [parentNameOrInstance, keepLocalTransform]) : "Daneel.Debug.CheckArgType(gameObject,"gameObject","GameObject",f)Daneel.Debug.CheckOptionalArgType(bU,"parentNameOrInstance",{"string","GameObject"},f)c5=Daneel.Debug.CheckOptionalArgType(c5,"keepLocalTransform","boolean",f,false)local bd=nil;if bU~=nil then bd=GameObject.Get(bU,true)end;c4(gameObject,bd,c5)Daneel.Debug.StackTrace.EndFunction()end;function GameObject.GetChild(gameObject,aa,y)Daneel.Debug.StackTrace.BeginFunction("GameObject.GetChild",gameObject,aa,y)local f="GameObject.GetChild( gameObject, name[, recursive] ) : "Daneel.Debug.CheckArgType(gameObject,"gameObject","GameObject",f)Daneel.Debug.CheckOptionalArgType(aa,"name","string",f)y=Daneel.Debug.CheckOptionalArgType(y,"recursive","boolean",f,false)local c6=nil;if aa==nil then local c7=gameObject:GetChildren()c6=c7[1]else local c1=string.split(aa,".")for l,aa in ipairs(c1)do gameObject=gameObject:FindChild(aa,y)if gameObject==nil then break end end;c6=gameObject end;Daneel.Debug.StackTrace.EndFunction()return c6 end;local c8=GameObject.GetChildren;function GameObject.GetChildren(gameObject,y,c9)Daneel.Debug.StackTrace.BeginFunction("GameObject.GetChildren",gameObject,y,c9)local f="GameObject.GetChildren( gameObject[, recursive, includeSelf] ) : "Daneel.Debug.CheckArgType(gameObject,"gameObject","GameObject",f)Daneel.Debug.CheckOptionalArgType(y,"recursive","boolean",f)Daneel.Debug.CheckOptionalArgType(c9,"includeSelf","boolean",f)local ca=c8(gameObject)if y then for l,c6 in ipairs(table.copy(ca))do ca=table.merge(ca,c6:GetChildren(true))end end;if c9 then table.insert(ca,1,gameObject)end;Daneel.Debug.StackTrace.EndFunction()return ca end;local cb=GameObject.SendMessage;function GameObject.SendMessage(gameObject,aL,am)Daneel.Debug.StackTrace.BeginFunction("GameObject.SendMessage",gameObject,aL,am)local f="GameObject.SendMessage(gameObject, functionName[, data]) : "Daneel.Debug.CheckArgType(gameObject,"gameObject","GameObject",f)Daneel.Debug.CheckArgType(aL,"functionName","string",f)Daneel.Debug.CheckOptionalArgType(am,"data","table",f)local aK=Daneel.Debug.Try(function()cb(gameObject,aL,am)end)if not aK then local cc="No data"local H=0;if am~=nil then H=table.getlength(am)cc="Data with "..H.." entries"end;print(f.."Error sending message with parameters : ",gameObject,aL,cc)if H>0 then table.print(am)end end;Daneel.Debug.StackTrace.EndFunction()end;function GameObject.BroadcastMessage(gameObject,aL,am)Daneel.Debug.StackTrace.BeginFunction("GameObject.BroadcastMessage",gameObject,aL,am)local f="GameObject.BroadcastMessage(gameObject, functionName[, data]) : "Daneel.Debug.CheckArgType(gameObject,"gameObject","GameObject",f)Daneel.Debug.CheckArgType(aL,"functionName","string",f)Daneel.Debug.CheckOptionalArgType(am,"data","table",f)local cd=gameObject:GetChildren(true,true)for l,ce in ipairs(cd)do ce:SendMessage(aL,am)end;Daneel.Debug.StackTrace.EndFunction()end;function GameObject.AddComponent(gameObject,bY,b9)Daneel.Debug.StackTrace.BeginFunction("GameObject.AddComponent",gameObject,bY,b9)local f="GameObject.AddComponent( gameObject, componentType[, params] ) : "Daneel.Debug.CheckArgType(gameObject,"gameObject","GameObject",f)Daneel.Debug.CheckArgType(bY,"componentType",{"string","Script"},f)bY=Daneel.Debug.CheckArgValue(bY,"componentType",Daneel.Config.componentTypes,f,bY)Daneel.Debug.CheckOptionalArgType(b9,"params","table",f)local b8=nil;if Daneel.Config.componentObjects[bY]==nil then local cf=Asset.Get(bY,"Script")if cf==nil then if Daneel.Config.debug.enableDebug then error(f.."Provided component type '"..tostring(bY).."' in not one of the component types, nor a script asset, path or alias.")end;Daneel.Debug.StackTrace.EndFunction()return end;if b9==nil then b9={}end;b8=gameObject:CreateScriptedBehavior(cf,b9)b9=nil elseif Daneel.DefaultConfig().componentObjects[bY]~=nil then if bY=="Transform"then if Daneel.Config.debug.enableDebug then print(f.."Can't add a transform component because gameObjects may only have one transform.")end;Daneel.Debug.StackTrace.EndFunction()return elseif bY=="ScriptedBehavior"then if Daneel.Config.debug.enableDebug then print(f.."To add a scripted behavior, pass the script asset, path or alias instead of 'ScriptedBehavior' as argument 'componentType'.")end;Daneel.Debug.StackTrace.EndFunction()return end;b8=gameObject:CreateComponent(bY)local cg=Daneel.Config[string.lcfirst(bY)]if cg~=nil then b9=table.merge(cg,b9)end else local ch=Daneel.Config.componentObjects[bY]if ch~=nil and type(ch.New)=="function"then b8=ch.New(gameObject)else if Daneel.Config.debug.enableDebug then error(f.."Custom component of type '"..bY.."' does not provide a New() function; Can't create the component.")end;Daneel.Debug.StackTrace.EndFunction()return end end;if b9~=nil and b8~=nil then b8:Set(b9)end;Daneel.Event.Fire(gameObject,"OnNewComponent",b8)Daneel.Debug.StackTrace.EndFunction()return b8 end;local ci=GameObject.GetComponent;local cj=GameObject.GetScriptedBehavior;function GameObject.GetComponent(gameObject,bY)Daneel.Debug.StackTrace.BeginFunction("GameObject.GetComponent",gameObject,bY)local f="GameObject.GetComponent( gameObject, componentType ) : "Daneel.Debug.CheckArgType(gameObject,"gameObject","GameObject",f)local N=Daneel.Debug.CheckArgType(bY,"componentType",{"string","Script"},f)bY=Daneel.Debug.CheckArgValue(bY,"componentType",Daneel.Config.componentTypes,f,bY)local ck=bY;if N=="string"then ck=string.lcfirst(bY)end;local b8=gameObject[ck]if b8==nil then if Daneel.DefaultConfig().componentObjects[bY]~=nil then b8=ci(gameObject,bY)elseif Daneel.Config.componentObjects[bY]==nil then local cf=Asset.Get(bY,"Script",true)b8=cj(gameObject,cf)end end;Daneel.Debug.StackTrace.EndFunction()return b8 end;function GameObject.GetScriptedBehavior(gameObject,cl)Daneel.Debug.StackTrace.BeginFunction("GameObject.GetScriptedBehavior",gameObject,cl)local f="GameObject.GetScriptedBehavior( gameObject, scriptNameOrAsset ) : "Daneel.Debug.CheckArgType(gameObject,"gameObject","GameObject",f)Daneel.Debug.CheckArgType(cl,"scriptNameOrAsset",{"string","Script"},f)local cf=Asset.Get(cl,"Script",true)local b8=cj(gameObject,cf)Daneel.Debug.StackTrace.EndFunction()return b8 end;function GameObject.Destroy(gameObject)Daneel.Debug.StackTrace.BeginFunction("GameObject.Destroy",gameObject)local f="GameObject.Destroy( gameObject ) : "Daneel.Debug.CheckArgType(gameObject,"gameObject","GameObject",f)for l,ce in pairs(gameObject:GetChildren(true,true))do ce:RemoveTag()end;for B,h in pairs(gameObject)do if B~="inner"and type(h)=="table"then Daneel.Event.Fire(h,"OnDestroy",h)end end;CraftStudio.Destroy(gameObject)Daneel.Debug.StackTrace.EndFunction()end;GameObject.Tags={}function GameObject.GetWithTag(cm)Daneel.Debug.StackTrace.BeginFunction("GameObject.GetWithTag",cm)local f="GameObject.GetWithTag( tag ) : "local N=Daneel.Debug.CheckArgType(cm,"tag",{"string","table"},f)local cn=cm;if N=="string"then cn={cn}end;local co={}local reindex=false;for l,cm in pairs(cn)do local bB=GameObject.Tags[cm]if bB~=nil then for a3,gameObject in pairs(bB)do if gameObject.inner~=nil then if gameObject:HasTag(cn)and not table.containsvalue(co,gameObject)then table.insert(co,gameObject)end else bB[a3]=nil;reindex=true end end;if reindex then GameObject.Tags[cm]=table.reindex(bB)reindex=false end end end;Daneel.Debug.StackTrace.EndFunction()return co end;function GameObject.GetTags(gameObject)Daneel.Debug.StackTrace.BeginFunction("GameObject.GetTags",gameObject)local f="GameObject.GetTags( gameObject ) : "Daneel.Debug.CheckArgType(gameObject,"gameObject","GameObject",f)local cn={}for cm,bB in pairs(GameObject.Tags)do if table.containsvalue(bB,gameObject)then table.insert(cn,cm)end end;Daneel.Debug.StackTrace.EndFunction()return cn end;function GameObject.AddTag(gameObject,cm)Daneel.Debug.StackTrace.BeginFunction("GameObject.AddTag",gameObject,cm)local f="GameObject.AddTag( gameObject, tag ) : "Daneel.Debug.CheckArgType(gameObject,"gameObject","GameObject",f)Daneel.Debug.CheckArgType(cm,"tag",{"string","table"},f)local cn=cm;if type(cn)=="string"then cn={cn}end;for l,cm in pairs(cn)do if GameObject.Tags[cm]==nil then GameObject.Tags[cm]={gameObject}elseif not table.containsvalue(GameObject.Tags[cm],gameObject)then table.insert(GameObject.Tags[cm],gameObject)end end;Daneel.Debug.StackTrace.EndFunction()end;function GameObject.RemoveTag(gameObject,cm)Daneel.Debug.StackTrace.BeginFunction("GameObject.RemoveTag",gameObject,cm)local f="GameObject.RemoveTag( gameObject[, tag] ) : "Daneel.Debug.CheckArgType(gameObject,"gameObject","GameObject",f)Daneel.Debug.CheckOptionalArgType(cm,"tag",{"string","table"},f)local cn=cm;if type(cn)=="string"then cn={cn}end;for cm,bB in pairs(GameObject.Tags)do if cn==nil or table.containsvalue(cn,cm)then table.removevalue(GameObject.Tags[cm],gameObject)end end;Daneel.Debug.StackTrace.EndFunction()end;function GameObject.HasTag(gameObject,cm,cp)Daneel.Debug.StackTrace.BeginFunction("GameObject.HasTag",gameObject,cm,cp)local f="GameObject.HasTag( gameObject, tag ) : "Daneel.Debug.CheckArgType(gameObject,"gameObject","GameObject",f)Daneel.Debug.CheckArgType(cm,"tag",{"string","table"},f)Daneel.Debug.CheckOptionalArgType(cp,"atLeastOneTag","boolean",f)local cn=cm;if type(cn)=="string"then cn={cn}end;local cq=false;if cp==true then for l,cm in pairs(cn)do if GameObject.Tags[cm]~=nil and table.containsvalue(GameObject.Tags[cm],gameObject)then cq=true;break end end else cq=true;for l,cm in pairs(cn)do if GameObject.Tags[cm]==nil or not table.containsvalue(GameObject.Tags[cm],gameObject)then cq=false;break end end end;Daneel.Debug.StackTrace.EndFunction()return cq end;function Daneel.SetComponents(cr)for bY,ch in pairs(cr)do Daneel.Utilities.AllowDynamicGettersAndSetters(ch,{Component})if bY~="ScriptedBehavior"then ch["__tostring"]=function(b8)return bY..": "..b8:GetId()end end end end;function Daneel.DefaultConfig()local cs={debug={enableDebug=false,enableStackTrace=false},scriptPaths={},hotKeys={},objects={GameObject=GameObject,Vector3=Vector3,Quaternion=Quaternion,Plane=Plane,Ray=Ray,RaycastHit=RaycastHit},componentObjects={ScriptedBehavior=ScriptedBehavior,ModelRenderer=ModelRenderer,MapRenderer=MapRenderer,Camera=Camera,Transform=Transform,Physics=Physics,TextRenderer=TextRenderer,NetworkSync=NetworkSync},componentTypes={},assetObjects={Script=Script,Model=Model,ModelAnimation=ModelAnimation,Map=Map,TileSet=TileSet,Sound=Sound,Scene=Scene,Font=Font},assetTypes={}}return cs end;Daneel.Config=Daneel.DefaultConfig()Daneel.SetComponents(Daneel.Config.componentObjects)for b0,ct in pairs(Daneel.Config.assetObjects)do table.insert(Daneel.Config.assetTypes,b0)Daneel.Utilities.AllowDynamicGettersAndSetters(ct,{Asset})ct["__tostring"]=function(b3)return b0 ..": "..Daneel.Cache.GetId(b3)..": '"..Map.GetPathInPackage(b3).."'"end end;Daneel.Config.componentTypes=table.getkeys(Daneel.Config.componentObjects)Daneel.Config.assetTypes=table.getkeys(Daneel.Config.assetObjects)function Daneel.Load()if Daneel.isLoaded then return end;Daneel.isLoading=true;if table.getvalue(_G,"DaneelUserConfig")~=nil and type(DaneelUserConfig)=="function"then Daneel.Config=table.deepmerge(Daneel.Config,DaneelUserConfig())end;for aa,cu in pairs(CS.DaneelModules)do if cu.isConfigLoaded~=true then cu.isConfigLoaded=true;if cu.Config==nil then cu.Config={}end;if type(cu.DefaultConfig)=="function"then cu.Config=cu.DefaultConfig()end;local cv={}local aL=aa.."UserConfig"if table.getvalue(_G,aL)~=nil and type(_G[aL])=="function"then cu.Config=table.deepmerge(cu.Config,_G[aL]())end;if cu.Config.objects~=nil then Daneel.Config.objects=table.merge(Daneel.Config.objects,cu.Config.objects)end;if cu.Config.componentObjects~=nil then Daneel.Config.componentObjects=table.merge(Daneel.Config.componentObjects,cu.Config.componentObjects)Daneel.Config.objects=table.merge(Daneel.Config.objects,cu.Config.componentObjects)end end end;Daneel.Config.objects=table.merge(Daneel.Config.objects,Daneel.Config.componentObjects,Daneel.Config.assetObjects)Daneel.SetComponents(Daneel.Config.componentObjects)Daneel.Config.componentTypes=table.getkeys(Daneel.Config.componentObjects)if Daneel.Config.debug.enableDebug and Daneel.Config.debug.enableStackTrace then Daneel.Debug.SetNewError()end;for cw,b4 in pairs(Daneel.Config.scriptPaths)do local cf=CraftStudio.FindAsset(b4,"Script")if cf~=nil then Daneel.Utilities.AllowDynamicGettersAndSetters(cf,{Script,Component})cf["__tostring"]=function(cx)return"ScriptedBehavior: "..Daneel.Cache.GetId(cx)..": '"..b4 .."'"end else Daneel.Config.scriptPaths[cw]=nil;if Daneel.Config.debug.enableDebug then print("Daneel.Load() : item with key '"..cw.."' and value '"..b4 .."' in 'Daneel.Config.scriptPaths' ('DaneelUserConfig()'') is not a valid script path.")end end end;if type(Camera.ProjectionMode.Orthographic)=="number"then CS.IsWebPlayer=true end;Daneel.Debug.StackTrace.BeginFunction("Daneel.Load")for l,cu in pairs(CS.DaneelModules)do if cu.isLoaded~=true then cu.isLoaded=true;if type(cu.Load)=="function"then cu.Load()end end end;Daneel.isLoaded=true;Daneel.isLoading=false;if Daneel.Config.debug.enableDebug then print("~~~~~ Daneel loaded ~~~~~")end;Daneel.moduleUpdateFunctions={}for l,cu in pairs(CS.DaneelModules)do if cu.doNotCallUpdate~=true then if type(cu.Update)=="function"and not table.containsvalue(Daneel.moduleUpdateFunctions,cu.Update)then table.insert(Daneel.moduleUpdateFunctions,cu.Update)end end end;Daneel.Debug.StackTrace.EndFunction()end;function Daneel.LateLoad(cy)if Daneel.isLateLoading or Daneel.isAwake then return end;Daneel.isLateLoading=true;print("~~~~~~ Daneel Late Load ~~~~~~",cy)local ce=CS.CreateGameObject("Daneel Late Load")ce:CreateScriptedBehavior(aI)end;local cz=""function Behavior:Awake()if self.debugTry==true then CraftStudio.Destroy(self)self.testFunction()self.successCallback()return end;if table.getvalue(_G,"LOAD_DANEEL")~=nil and LOAD_DANEEL==false then return end;if Daneel.isAwake then if Daneel.Config.debug.enableDebug then print("Daneel:Awake() : You tried to load Daneel twice ! This time the 'Daneel' scripted behavior was on "..tostring(self.gameObject))end;CS.Destroy(self)return end;Daneel.isAwake=true;Daneel.Event.Listen("OnSceneLoad",function()Daneel.isAwake=false end)Daneel.Load()Daneel.Debug.StackTrace.messages={}Daneel.Debug.StackTrace.BeginFunction("Daneel.Awake")if Daneel.isLateLoading then for cm,bB in pairs(GameObject.Tags)do for l,gameObject in pairs(bB)do if gameObject.inner==nil then bB[l]=nil end end;GameObject.Tags[cm]=table.reindex(bB)end else GameObject.Tags={}end;for l,cu in pairs(CS.DaneelModules)do if type(cu.Awake)=="function"then cu.Awake()end end;if Daneel.Config.debug.enableDebug then print("~~~~~ Daneel awake ~~~~~")end;Daneel.Event.Fire("OnAwake")Daneel.Debug.StackTrace.EndFunction()end;function Behavior:Start()if self.debugTry then return end;Daneel.Debug.StackTrace.BeginFunction("Daneel.Start")for l,cu in pairs(CS.DaneelModules)do if type(cu.Start)=="function"then cu.Start()end end;if Daneel.Config.debug.enableDebug then print("~~~~~ Daneel started ~~~~~")end;Daneel.Event.Fire("OnStart")Daneel.isLateLoading=nil;Daneel.Debug.StackTrace.EndFunction()end;function Behavior:Update()if self.debugTry then return end;local cA=os.clock()Daneel.Time.realDeltaTime=cA-Daneel.Time.realTime;Daneel.Time.realTime=cA;Daneel.Time.deltaTime=Daneel.Time.realDeltaTime*Daneel.Time.timeScale;Daneel.Time.time=Daneel.Time.time+Daneel.Time.deltaTime;Daneel.Time.frameCount=Daneel.Time.frameCount+1;for l,an in pairs(Daneel.Config.hotKeys)do if CraftStudio.Input.WasButtonJustPressed(an)then Daneel.Event.Fire("On"..an.."ButtonJustPressed")end;if CraftStudio.Input.IsButtonDown(an)then Daneel.Event.Fire("On"..an.."ButtonDown")end;if CraftStudio.Input.WasButtonJustReleased(an)then Daneel.Event.Fire("On"..an.."ButtonJustReleased")end end;for l,K in pairs(Daneel.moduleUpdateFunctions)do K()end end
GUI={pixelsToUnits=0}function GUI.ToSceneUnit(value)if type(value)=="string"then value=value:trim()if value:find("px")then if GUI.Config.cameraGO==nil then error("GUI.ToSceneUnit( value ) : Can't convert the value '"..value.."' from pixels to scene units because the HUD camera has not been found (the game object with name '"..GUI.Config.cameraName.."' (value of 'cameraName' in the config)).")end;value=tonumber(value:sub(0,#value-2))*GUI.pixelsToUnits elseif value:find("u")then value=tonumber(value:sub(0,#value-1))else value=tonumber(value)end end;return value end;GUI.Hud={}GUI.Hud.__index=GUI.Hud;function GUI.Hud.ToHudPosition(a)if not Daneel.isAwake then Daneel.LateLoad("GUI.Hud.ToHudPosition")end;Daneel.Debug.StackTrace.BeginFunction("GUI.Hud.ToHudPosition",a)local b="GUI.Hud.ToHudPosition(hud, position) : "Daneel.Debug.CheckArgType(a,"position","Vector3",b)if GUI.Config.cameraGO==nil then error(b.."Can't convert the position '"..tostring(a).."' from scene units to pixels because the HUD camera has not been found (the game object with name '"..GUI.Config.cameraName.."' (value of 'cameraName' in the config)).")end;local c=GUI.Config.originGO.transform:GetPosition().z-a.z;a=a-GUI.Config.originGO.transform:GetPosition()a=Vector2(a.x/GUI.pixelsToUnits,-a.y/GUI.pixelsToUnits)Daneel.Debug.StackTrace.EndFunction()return a,c end;function GUI.Hud.ToPixel(value,d)if type(value)=="string"then value=value:trim()local e=CS.Screen.GetSize()if value:find("px")then value=tonumber(value:sub(0,#value-2))elseif value:find("%",1,true)and d~=nil then value=e[d]*tonumber(value:sub(0,#value-1))/100 elseif value:find("s")and d~=nil then value=value:sub(2)if value==""then value=0 end;value=e[d]+tonumber(value)elseif value:find("u")then if GUI.Config.cameraGO==nil then error("GUI.Hud.ToPixel( value[, screenSide] ) : Can't convert the value '"..value.."' from scene units to pixels because the HUD camera has not been found (the game object with name '"..GUI.Config.cameraName.."' (value of 'cameraName' in the config)).")end;value=tonumber(value:sub(0,#value-1))/GUI.pixelsToUnits else value=tonumber(value)end end;return value end;function GUI.Hud.FixPosition(a)return Vector2.New(GUI.Hud.ToPixel(a.x,"x"),GUI.Hud.ToPixel(a.y,"y"))end;function GUI.Hud.New(f,g)if not Daneel.isAwake then Daneel.LateLoad("GUI.Hud.New")end;Daneel.Debug.StackTrace.BeginFunction("GUI.Hud.New",f,g)local b="GUI.Hud.New( gameObject, params ) : "Daneel.Debug.CheckArgType(f,"gameObject","GameObject",b)g=Daneel.Debug.CheckOptionalArgType(g,"params","table",b,{})if GUI.Config.cameraGO==nil then error(b.."Can't create a Hud component because the HUD camera has not been found (the game object with name '"..GUI.Config.cameraName.."' (value of 'cameraName' in the config)).")end;local hud=setmetatable({},GUI.Hud)hud.gameObject=f;hud.id=Daneel.Cache.GetId()f.hud=hud;hud:Set(table.merge(GUI.Config.hud,g))Daneel.Debug.StackTrace.EndFunction()return hud end;function GUI.Hud.SetPosition(hud,a)Daneel.Debug.StackTrace.BeginFunction("GUI.Hud.SetPosition",hud,a)local b="GUI.Hud.SetPosition(hud, position) : "Daneel.Debug.CheckArgType(hud,"hud","Hud",b)Daneel.Debug.CheckArgType(a,"position","Vector2",b)a=GUI.Hud.FixPosition(a)local h=GUI.Config.originGO.transform:GetPosition()+Vector3:New(a.x*GUI.pixelsToUnits,-a.y*GUI.pixelsToUnits,0)h.z=hud.gameObject.transform:GetPosition().z;hud.gameObject.transform:SetPosition(h)Daneel.Debug.StackTrace.EndFunction()end;function GUI.Hud.GetPosition(hud)Daneel.Debug.StackTrace.BeginFunction("GUI.Hud.GetPosition",hud)local b="GUI.Hud.GetPosition(hud) : "Daneel.Debug.CheckArgType(hud,"hud","Hud",b)local a=hud.gameObject.transform:GetPosition()-GUI.Config.originGO.transform:GetPosition()a=a/GUI.pixelsToUnits;a=Vector2.New(math.round(a.x),math.round(-a.y))Daneel.Debug.StackTrace.EndFunction()return a end;function GUI.Hud.SetLocalPosition(hud,a)Daneel.Debug.StackTrace.BeginFunction("GUI.Hud.SetLocalPosition",hud,a)local b="GUI.Hud.SetLocalPosition(hud, position) : "Daneel.Debug.CheckArgType(hud,"hud","Hud",b)Daneel.Debug.CheckArgType(a,"position","Vector2",b)a=GUI.Hud.FixPosition(a)local parent=hud.gameObject.parent;if parent==nil then parent=GUI.Config.originGO end;local h=parent.transform:GetPosition()+Vector3:New(a.x*GUI.pixelsToUnits,-a.y*GUI.pixelsToUnits,0)h.z=hud.gameObject.transform:GetPosition().z;hud.gameObject.transform:SetPosition(h)Daneel.Debug.StackTrace.EndFunction()end;function GUI.Hud.GetLocalPosition(hud)Daneel.Debug.StackTrace.BeginFunction("GUI.Hud.GetLocalPosition",hud)local b="GUI.Hud.GetLocalPosition(hud) : "Daneel.Debug.CheckArgType(hud,"hud","Hud",b)local parent=hud.gameObject.parent;if parent==nil then parent=GUI.Config.originGO end;local a=hud.gameObject.transform:GetPosition()-parent.transform:GetPosition()a=a/GUI.pixelsToUnits;a=Vector2.New(math.round(a.x),math.round(-a.y))Daneel.Debug.StackTrace.EndFunction()return a end;function GUI.Hud.SetLayer(hud,c)Daneel.Debug.StackTrace.BeginFunction("GUI.Hud.SetLayer",hud)local b="GUI.Hud.SetLayer(hud, layer) : "Daneel.Debug.CheckArgType(hud,"hud","Hud",b)Daneel.Debug.CheckArgType(c,"layer","number",b)local i=GUI.Config.originGO.transform:GetPosition().z;local j=hud.gameObject.transform:GetPosition()hud.gameObject.transform:SetPosition(Vector3:New(j.x,j.y,i-c))Daneel.Debug.StackTrace.EndFunction()end;function GUI.Hud.GetLayer(hud)Daneel.Debug.StackTrace.BeginFunction("GUI.Hud.GetLayer",hud)local b="GUI.Hud.GetLyer(hud) : "Daneel.Debug.CheckArgType(hud,"hud","Hud",b)local i=GUI.Config.originGO.transform:GetPosition().z;local c=math.round(i-hud.gameObject.transform:GetPosition().z,1)Daneel.Debug.StackTrace.EndFunction()return c end;function GUI.Hud.SetLocalLayer(hud,c)Daneel.Debug.StackTrace.BeginFunction("GUI.Hud.SetLayer",hud)local b="GUI.Hud.SetLayer(hud, layer) : "Daneel.Debug.CheckArgType(hud,"hud","Hud",b)Daneel.Debug.CheckArgType(c,"layer","number",b)local parent=hud.gameObject.parent;if parent==nil then parent=GUI.Config.originGO end;local i=parent.transform:GetPosition().z;local j=hud.gameObject.transform:GetPosition()hud.gameObject.transform:SetPosition(Vector3:New(j.x,j.y,i-c))Daneel.Debug.StackTrace.EndFunction()end;function GUI.Hud.GetLocalLayer(hud)Daneel.Debug.StackTrace.BeginFunction("GUI.Hud.GetLayer",hud)local b="GUI.Hud.GetLyer(hud) : "Daneel.Debug.CheckArgType(hud,"hud","Hud",b)local parent=hud.gameObject.parent;if parent==nil then parent=GUI.Config.originGO end;local i=parent.transform:GetPosition().z;local c=math.round(i-hud.gameObject.transform:GetPosition().z,1)Daneel.Debug.StackTrace.EndFunction()return c end;GUI.Toggle={}GUI.Toggle.__index=GUI.Toggle;function GUI.Toggle.New(f,g)if not Daneel.isAwake then Daneel.LateLoad("GUI.Toggle.New")end;Daneel.Debug.StackTrace.BeginFunction("GUI.Toggle.New",f,g)local b="GUI.Toggle.New( gameObject, params ) : "Daneel.Debug.CheckArgType(f,"gameObject","GameObject",b)g=Daneel.Debug.CheckOptionalArgType(g,"params","table",b,{})local toggle=table.copy(GUI.Config.toggle)toggle.defaultText=toggle.text;toggle.text=nil;toggle.gameObject=f;toggle.id=Daneel.Cache.GetId()setmetatable(toggle,GUI.Toggle)toggle:Set(g)f.toggle=toggle;f:AddTag("guiComponent")f.OnNewComponent=function(k)if k==nil then return end;local l=getmetatable(k)if l==TextRenderer then local m=k:GetText()if m==nil then m=toggle.defaultText end;toggle:SetText(m)elseif l==ModelRenderer and toggle.checkedModel~=nil then if toggle.isChecked and toggle.checkedModel~=nil then k:SetModel(toggle.checkedModel)elseif not toggle.isChecked and toggle.uncheckedModel~=nil then k:SetModel(toggle.uncheckedModel)end end end;f.OnClick=function()if not(toggle.group~=nil and toggle.isChecked)then toggle:Check(not toggle.isChecked)end end;if f.textRenderer~=nil and f.textRenderer:GetText()~=nil then toggle:SetText(f.textRenderer:GetText())end;if f.modelRenderer~=nil then if toggle.isChecked and toggle.checkedModel~=nil then toggle.gameObject.modelRenderer:SetModel(toggle.checkedModel)elseif not toggle.isChecked and toggle.uncheckedModel~=nil then toggle.gameObject.modelRenderer:SetModel(toggle.uncheckedModel)end end;toggle:Check(toggle.isChecked,true)Daneel.Debug.StackTrace.EndFunction()return toggle end;function GUI.Toggle.SetText(toggle,m)Daneel.Debug.StackTrace.BeginFunction("GUI.Toggle.SetText",toggle,m)local b="GUI.Toggle.SetText( toggle, text ) : "Daneel.Debug.CheckArgType(toggle,"toggle","Toggle",b)Daneel.Debug.CheckArgType(m,"text","string",b)if toggle.gameObject.textRenderer~=nil then if toggle.isChecked==true then m=Daneel.Utilities.ReplaceInString(toggle.checkedMark,{text=m})else m=Daneel.Utilities.ReplaceInString(toggle.uncheckedMark,{text=m})end;toggle.gameObject.textRenderer:SetText(m)else if Daneel.Config.debug.enableDebug then print("WARNING : "..b.."Can't set the toggle's text because no TextRenderer component has been found on the gameObject '"..tostring(toggle.gameObject).."'. Waiting for a TextRenderer to be added.")end;toggle.defaultText=m end;Daneel.Debug.StackTrace.EndFunction()end;function GUI.Toggle.GetText(toggle)Daneel.Debug.StackTrace.BeginFunction("GUI.Toggle.GetText",toggle)local b="GUI.Toggle.GetText(toggle, text) : "Daneel.Debug.CheckArgType(toggle,"toggle","Toggle",b)local m=nil;if toggle.gameObject.textRenderer~=nil then m=toggle.gameObject.textRenderer:GetText()if m==nil then m=toggle.defaultText end;local n=toggle.checkedMark;if not toggle.isChecked then n=toggle.uncheckedMark end;local o,p=n:find(":text")if o~=nil and p~=nil then local q=n:sub(1,o-1)local r=n:sub(p+1)m=m:gsub(q,""):gsub(r,"")end elseif Daneel.Config.debug.enableDebug then print("WARNING : "..b.."Can't get the toggle's text because no TextRenderer component has been found on the gameObject '"..tostring(toggle.gameObject).."'. Returning nil.")end;Daneel.Debug.StackTrace.EndFunction()return m end;function GUI.Toggle.Check(toggle,s,t)Daneel.Debug.StackTrace.BeginFunction("GUI.Toggle.Check",toggle,s,t)local b="GUI.Toggle.Check( toggle[, state, forceUpdate] ) : "Daneel.Debug.CheckArgType(toggle,"toggle","Toggle",b)s=Daneel.Debug.CheckOptionalArgType(s,"state","boolean",b,true)t=Daneel.Debug.CheckOptionalArgType(t,"forceUpdate","boolean",b,false)if t or toggle.isChecked~=s then local m=nil;if toggle.gameObject.textRenderer~=nil then m=toggle:GetText()end;toggle.isChecked=s;if toggle.gameObject.textRenderer~=nil then toggle:SetText(m)end;if toggle.gameObject.modelRenderer~=nil then if s==true and toggle.checkedModel~=nil then toggle.gameObject.modelRenderer:SetModel(toggle.checkedModel)elseif s==false and toggle.uncheckedModel~=nil then toggle.gameObject.modelRenderer:SetModel(toggle.uncheckedModel)end end;Daneel.Event.Fire(toggle,"OnUpdate",toggle)if toggle.Group~=nil and s==true then local u=GameObject.GetWithTag(toggle.Group)for v,f in ipairs(u)do if f~=toggle.gameObject then f.toggle:Check(false,true)end end end end;Daneel.Debug.StackTrace.EndFunction()end;function GUI.Toggle.SetGroup(toggle,w)Daneel.Debug.StackTrace.BeginFunction("GUI.Toggle.SetGroup",toggle,w)local b="GUI.Toggle.SetGroup(toggle[, group]) : "Daneel.Debug.CheckArgType(toggle,"toggle","Toggle",b)Daneel.Debug.CheckOptionalArgType(w,"group","string",b)if w==nil and toggle.Group~=nil then toggle.gameObject:RemoveTag(toggle.Group)else if toggle.Group~=nil then toggle.gameObject:RemoveTag(toggle.Group)end;toggle:Check(false)toggle.Group=w;toggle.gameObject:AddTag(toggle.Group)end;Daneel.Debug.StackTrace.EndFunction()end;function GUI.Toggle.GetGroup(toggle)Daneel.Debug.StackTrace.BeginFunction("GUI.Toggle.GetGroup",toggle)local b="GUI.Toggle.GetGroup(toggle) : "Daneel.Debug.CheckArgType(toggle,"toggle","Toggle",b)Daneel.Debug.StackTrace.EndFunction()return toggle.Group end;function GUI.Toggle.Set(toggle,g)Daneel.Debug.StackTrace.BeginFunction("GUI.Toggle.Set",toggle,g)local b="GUI.Toggle.Set( toggle, params ) : "Daneel.Debug.CheckArgType(toggle,"toggle","Toggle",b)Daneel.Debug.CheckArgType(g,"params","table",b)local w=g.group;g.group=nil;local isChecked=g.isChecked;g.isChecked=nil;for x,value in pairs(g)do toggle[x]=value end;if w~=nil then toggle:SetGroup(w)end;if isChecked~=nil then toggle:Check(isChecked)end;Daneel.Debug.StackTrace.EndFunction()end;GUI.ProgressBar={}GUI.ProgressBar.__index=GUI.ProgressBar;function GUI.ProgressBar.New(f,g)if not Daneel.isAwake then Daneel.LateLoad("GUI.ProgressBar.New")end;Daneel.Debug.StackTrace.BeginFunction("GUI.ProgressBar.New",f,g)local b="GUI.ProgressBar.New( gameObject, params ) : "Daneel.Debug.CheckArgType(f,"gameObject","GameObject",b)g=Daneel.Debug.CheckOptionalArgType(g,"params","table",b,{})local progressBar=table.copy(GUI.Config.progressBar)progressBar.gameObject=f;progressBar.id=Daneel.Cache.GetId()progressBar.value=nil;setmetatable(progressBar,GUI.ProgressBar)if g.value==nil then g.value=GUI.Config.progressBar.value end;progressBar:Set(g)f.progressBar=progressBar;Daneel.Debug.StackTrace.EndFunction()return progressBar end;function GUI.ProgressBar.SetValue(progressBar,value)Daneel.Debug.StackTrace.BeginFunction("GUI.ProgressBar.SetValue",progressBar,value)local b="GUI.ProgressBar.SetValue(progressBar, value) : "Daneel.Debug.CheckArgType(progressBar,"progressBar","ProgressBar",b)Daneel.Debug.CheckArgType(value,"value",{"string","number"},b)local y=progressBar.minValue;local A=progressBar.maxValue;local B=nil;if type(value)=="string"then if value:endswith("%")then B=tonumber(value:sub(1,#value-1))/100;local C=B;B=math.clamp(B,0.0,1.0)if B~=C and Daneel.Config.debug.enableDebug then print(b.."WARNING : value in percentage with value '"..value.."' is below 0% or above 100%.")end;value=(A-y)*B+y else value=tonumber(value)end end;local D=value;value=math.clamp(value,y,A)progressBar.minLength=GUI.ToSceneUnit(progressBar.minLength)progressBar.maxLength=GUI.ToSceneUnit(progressBar.maxLength)local E=progressBar:GetValue()if value~=E then if value~=D and Daneel.Config.debug.enableDebug then print(b.." WARNING : value with value '"..D.."' is out of its boundaries : min='"..y.."', max='"..A.."'")end;B=(value-y)/A-y;progressBar.height=GUI.ToSceneUnit(progressBar.height)local F=(progressBar.maxLength-progressBar.minLength)*B+progressBar.minLength;local G=progressBar.gameObject.transform:GetLocalScale()progressBar.gameObject.transform:SetLocalScale(Vector3:New(F,progressBar.height,G.z))Daneel.Event.Fire(progressBar,"OnUpdate",progressBar)end;Daneel.Debug.StackTrace.EndFunction()end;function GUI.ProgressBar.SetProgress(progressBar,H)GUI.ProgressBar.SetValue(progressBar,H)end;function GUI.ProgressBar.UpdateValue(progressBar,value,I)if value==progressBar._value then return end;progressBar._value=value;local y=progressBar.minValue;local A=progressBar.maxValue;local minLength=progressBar.minLength;local B=nil;if type(value)=="string"then local J=value;value=tonumber(value)if value==nil then B=tonumber(J:sub(1,#J-1))/100 end end;if B==nil then B=(value-y)/A-y end;B=math.clamp(B,0.0,1.0)local F=(progressBar.maxLength-minLength)*B+minLength;local G=progressBar.gameObject.transform:GetLocalScale()progressBar.gameObject.transform:SetLocalScale(Vector3:New(F,progressBar.height,G.z))if I==true then Daneel.Event.Fire(progressBar,"OnUpdate",progressBar)end end;function GUI.ProgressBar.UpdateProgress(progressBar,value,I)GUI.ProgressBar.UpdateValue(progressBar,value,I)end;function GUI.ProgressBar.GetValue(progressBar,K)Daneel.Debug.StackTrace.BeginFunction("GUI.ProgressBar.GetValue",progressBar,K)local b="GUI.ProgressBar.GetValue(progressBar[, getAsPercentage]) : "Daneel.Debug.CheckArgType(progressBar,"progressBar","ProgressBar",b)Daneel.Debug.CheckOptionalArgType(K,"getAsPercentage","boolean",b)local L=progressBar.gameObject.transform:GetLocalScale().x;local value=(L-progressBar.minLength)/progressBar.maxLength-progressBar.minLength;if K==true then value=value*100 else value=(progressBar.maxValue-progressBar.minValue)*value+progressBar.minValue end;value=math.round(value)Daneel.Debug.StackTrace.EndFunction()return value end;function GUI.ProgressBar.GetProgress(progressBar,K)return GUI.ProgressBar.GetValue(progressBar,K)end;function GUI.ProgressBar.SetHeight(progressBar,M)Daneel.Debug.StackTrace.BeginFunction("GUI.ProgressBar.SetHeight",progressBar,M)local b="GUI.ProgressBar.SetHeight( progressBar, height ) : "Daneel.Debug.CheckArgType(progressBar,"progressBar","ProgressBar",b)Daneel.Debug.CheckOptionalArgType(M,"height",{"number","string"},b)M=GUI.ToSceneUnit(M)local G=progressBar.gameObject.transform:GetLocalScale()progressBar.gameObject.transform:SetLocalScale(Vector3:New(G.x,M,G.z))Daneel.Debug.StackTrace.EndFunction()end;function GUI.ProgressBar.GetHeight(progressBar)Daneel.Debug.StackTrace.BeginFunction("GUI.ProgressBar.GetHeight",progressBar)local b="GUI.ProgressBar.GetHeight( progressBar ) : "Daneel.Debug.CheckArgType(progressBar,"progressBar","ProgressBar",b)local M=progressBar.gameObject.transform:GetLocalScale().y;Daneel.Debug.StackTrace.EndFunction()return M end;function GUI.ProgressBar.Set(progressBar,g)Daneel.Debug.StackTrace.BeginFunction("GUI.ProgressBar.Set",progressBar,g)local b="GUI.ProgressBar.Set( progressBar, params ) : "Daneel.Debug.CheckArgType(progressBar,"progressBar","ProgressBar",b)Daneel.Debug.CheckArgType(g,"params","table",b)local value=g.value;g.value=nil;if value==nil then value=progressBar:GetValue()end;for x,value in pairs(g)do progressBar[x]=value end;progressBar:SetValue(value)Daneel.Debug.StackTrace.EndFunction()end;GUI.Slider={}GUI.Slider.__index=GUI.Slider;function GUI.Slider.New(f,g)if not Daneel.isAwake then Daneel.LateLoad("GUI.Slider.New")end;Daneel.Debug.StackTrace.BeginFunction("GUI.Slider.New",f,g)local b="GUI.Slider.New( gameObject, params ) : "Daneel.Debug.CheckArgType(f,"gameObject","GameObject",b)g=Daneel.Debug.CheckOptionalArgType(g,"params","table",b,{})if GUI.Config.cameraGO==nil then error(b.."Can't create a Slider component because the HUD camera has not been found (the game object with name '"..GUI.Config.cameraName.."' (value of 'cameraName' in the config)).")end;local slider=table.copy(GUI.Config.slider)slider.gameObject=f;slider.id=Daneel.Cache.GetId()slider.value=nil;slider.parent=slider.gameObject:GetParent()if slider.parent==nil then local N=CS.CreateGameObject("SliderParent")N.transform:SetPosition(slider.gameObject.transform:GetPosition())slider.gameObject:SetParent(N)end;setmetatable(slider,GUI.Slider)f.slider=slider;f:AddTag("guiComponent")f.OnDrag=function()local O=CraftStudio.Input.GetMouseDelta()local P=Vector3:New(O.x,0,0)if slider.axis=="y"then P=Vector3:New(0,-O.y,0,0)end;f.transform:Move(P*GUI.pixelsToUnits)local Q=f.transform:GetPosition()local R=slider.parent.transform:GetPosition()if slider.axis=="x"and Q.x<R.x or slider.axis=="y"and Q.y<R.y then slider:SetValue(slider.minValue)elseif slider:GetValue()>slider.maxValue then slider:SetValue(slider.maxValue)else Daneel.Event.Fire(slider,"OnUpdate",slider)end end;if g.value==nil then g.value=GUI.Config.slider.value end;slider:Set(g)Daneel.Debug.StackTrace.EndFunction()return slider end;function GUI.Slider.SetValue(slider,value)Daneel.Debug.StackTrace.BeginFunction("GUI.Slider.SetValue",slider,value)local b="GUI.Slider.SetValue( slider, value ) : "Daneel.Debug.CheckArgType(slider,"slider","Slider",b)Daneel.Debug.CheckArgType(value,"value",{"string","number"},b)local A=slider.maxValue;local y=slider.minValue;local S=nil;if type(value)=="string"then if value:endswith("%")then S=tonumber(value:sub(1,#value-1))/100;value=(A-y)*S+y else value=tonumber(value)end end;local D=value;value=math.clamp(value,y,A)if value~=D and Daneel.Config.debug.enableDebug then print(b.."WARNING : Argument 'value' with value '"..D.."' is out of its boundaries : min='"..y.."', max='"..A.."'")end;S=(value-y)/A-y;slider.length=GUI.ToSceneUnit(slider.length)local T=-Vector3:Left()if slider.axis=="y"then T=Vector3:Up()end;local U=Vector3.Rotate(T,slider.gameObject.transform:GetOrientation())local h=slider.parent.transform:GetPosition()+U*slider.length*S;slider.gameObject.transform:SetPosition(h)Daneel.Event.Fire(slider,"OnUpdate",slider)Daneel.Debug.StackTrace.EndFunction()end;function GUI.Slider.GetValue(slider,K)Daneel.Debug.StackTrace.BeginFunction("GUI.Slider.GetValue",slider,K)local b="GUI.Slider.GetValue( slider, value ) : "Daneel.Debug.CheckArgType(slider,"slider","Slider",b)Daneel.Debug.CheckOptionalArgType(K,"getAsPercentage","boolean",b)local S=Vector3.Distance(slider.parent.transform:GetPosition(),slider.gameObject.transform:GetPosition())/slider.length;local value=S*100;if K~=true then value=(slider.maxValue-slider.minValue)*S+slider.minValue end;Daneel.Debug.StackTrace.EndFunction()return value end;function GUI.Slider.Set(slider,g)Daneel.Debug.StackTrace.BeginFunction("GUI.Slider.Set",slider,g)local b="GUI.Slider.Set( slider, params ) : "Daneel.Debug.CheckArgType(slider,"slider","Slider",b)Daneel.Debug.CheckArgType(g,"params","table",b)local value=g.value;g.value=nil;if value==nil then value=slider:GetValue()end;for x,value in pairs(g)do slider[x]=value end;slider:SetValue(value)Daneel.Debug.StackTrace.EndFunction()end;GUI.Input={}GUI.Input.__index=GUI.Input;function GUI.Input.New(f,g)if not Daneel.isAwake then Daneel.LateLoad("GUI.Input.New")end;Daneel.Debug.StackTrace.BeginFunction("GUI.Input.New",f,g)local b="GUI.Input.New( gameObject, params ) : "Daneel.Debug.CheckArgType(f,"gameObject","GameObject",b)g=Daneel.Debug.CheckOptionalArgType(g,"params","table",b,{})local input=table.merge(GUI.Config.input,g)input.gameObject=f;input.id=Daneel.Cache.GetId()setmetatable(input,GUI.Input)if input.OnTextEntered==nil then input.OnTextEntered=function(V)if input.isFocused then local W=string.byte(V)if W==8 then local m=f.textRenderer:GetText()input:Update(m:sub(1,#m-1),true)elseif W>=32 and W<=127 then if input.characterRange~=nil and input.characterRange:find(V,1,true)==nil then return end;input:Update(V)end end end end;local X=f:GetChild("Cursor")if X~=nil then input.cursorGO=X;X.tweener=Tween.Timer(input.cursorBlinkInterval,function(Y)if Y.gameObject==nil or Y.gameObject.inner==nil then Y:Destroy()return end;local opacity=1;if Y.gameObject.modelRenderer:GetOpacity()==1 then opacity=0 end;Y.gameObject.modelRenderer:SetOpacity(opacity)end,true)X.tweener.isPaused=true;X.tweener.gameObject=X end;local isFocused=input.isFocused;input.isFocused=nil;input:Focus(isFocused)f.input=input;f:AddTag("guiComponent")local Z=f:GetChild("Background")if Z~=nil then input.backgroundGO=Z;if input.focusOnBackgroundClick then Z:AddTag("guiComponent")end end;input.OnLeftMouseButtonJustPressed=function()local _=f.isMouseOver;if _~=true and input.focusOnBackgroundClick and input.backgroundGO~=nil then _=input.backgroundGO.isMouseOver end;if _==nil then _=false end;input:Focus(_)end;Daneel.Event.Listen("OnLeftMouseButtonJustPressed",input)input.OnValidateInputButtonJustPressed=function()if input.isFocused then Daneel.Event.Fire(input,"OnValidate",input)end end;Daneel.Event.Listen("OnValidateInputButtonJustPressed",input)Daneel.Debug.StackTrace.EndFunction()return input end;function GUI.Input.Focus(input,_)Daneel.Debug.StackTrace.BeginFunction("GUI.Input.Focus",input,_)local b="GUI.Input.Focus(input[, focus]) : "Daneel.Debug.CheckArgType(input,"input","Input",b)_=Daneel.Debug.CheckOptionalArgType(_,"focus","boolean",b,true)if input.isFocused~=_ then input.isFocused=_;local m=string.trim(input.gameObject.textRenderer:GetText())if _==true then CS.Input.OnTextEntered(input.OnTextEntered)if m==input.defaultValue then input.gameObject.textRenderer:SetText("")end else CS.Input.OnTextEntered(nil)if input.defaultValue~=nil and input.defaultValue~=""and m==""then input.gameObject.textRenderer:SetText(input.defaultValue)end end;Daneel.Event.Fire(input,"OnFocus",input)input:UpdateCursor()end;Daneel.Debug.StackTrace.EndFunction()end;function GUI.Input.UpdateCursor(input)Daneel.Debug.StackTrace.BeginFunction("GUI.Input.UpdateCursor",input)local b="GUI.Input.UpdateCursor( input ) : "Daneel.Debug.CheckArgType(input,"input","Input",b)if input.cursorGO~=nil then local alignment=input.gameObject.textRenderer:GetAlignment()if alignment~=TextRenderer.Alignment.Right then local length=input.gameObject.textRenderer:GetTextWidth()if alignment==TextRenderer.Alignment.Center then length=length/2 end;input.cursorGO.transform:SetLocalPosition(Vector3:New(length,0,0))end;local opacity=1;if not input.isFocused then opacity=0 end;input.cursorGO.modelRenderer:SetOpacity(opacity)input.cursorGO.tweener.isPaused=not input.isFocused;Daneel.Event.Fire(input.cursorGO,"OnUpdate",input)end;Daneel.Debug.StackTrace.EndFunction()end;function GUI.Input.Update(input,m,a0)if not type(input)=="table"or not input.isFocused then return end;Daneel.Debug.StackTrace.BeginFunction("GUI.Input.Update",input,m)local b="GUI.Input.Update(input, text) : "Daneel.Debug.CheckArgType(input,"input","Input",b)Daneel.Debug.CheckArgType(m,"text","string",b)a0=Daneel.Debug.CheckOptionalArgType(a0,"replaceText","boolean",b,false)local a1=input.gameObject.textRenderer:GetText()if a0==false then m=a1 ..m end;if#m>input.maxLength then m=m:sub(1,input.maxLength)end;if a1~=m then input.gameObject.textRenderer:SetText(m)Daneel.Event.Fire(input,"OnUpdate",input)input:UpdateCursor()end;Daneel.Debug.StackTrace.EndFunction()end;GUI.TextArea={}GUI.TextArea.__index=GUI.TextArea;function GUI.TextArea.New(f,g)if not Daneel.isAwake then Daneel.LateLoad("GUI.TextArea.New")end;Daneel.Debug.StackTrace.BeginFunction("GUI.TextArea.New",f,g)local b="GUI.TextArea.New( gameObject, params ) : "Daneel.Debug.CheckArgType(f,"gameObject","GameObject",b)g=Daneel.Debug.CheckOptionalArgType(g,"params","table",b,{})local textArea={}textArea.gameObject=f;textArea.id=Daneel.Cache.GetId()textArea.lineRenderers={}setmetatable(textArea,GUI.TextArea)textArea.textRuler=f.textRenderer;if textArea.textRuler==nil then textArea.textRuler=f:CreateComponent("TextRenderer")end;textArea.textRuler:SetText("")textArea:Set(table.merge(GUI.Config.textArea,g))f.textArea=textArea;Daneel.Debug.StackTrace.EndFunction()return textArea end;function GUI.TextArea.Set(textArea,g)Daneel.Debug.StackTrace.BeginFunction("GUI.TextArea.Set",textArea,g)local b="GUI.TextArea.Set( textArea, params ) : "Daneel.Debug.CheckArgType(textArea,"textArea","TextArea",b)Daneel.Debug.CheckArgType(g,"params","table",b)local a2=textArea.lineRenderers;textArea.lineRenderers={}local m=g.text;g.text=nil;for x,value in pairs(g)do textArea[x]=value end;textArea.lineRenderers=a2;if m==nil then m=textArea.Text end;textArea:SetText(m)Daneel.Debug.StackTrace.EndFunction()end;function GUI.TextArea.SetText(textArea,m)Daneel.Debug.StackTrace.BeginFunction("GUI.TextArea.SetText",textArea,m)local b="GUI.TextArea.SetText( textArea, text ) : "Daneel.Debug.CheckArgType(textArea,"textArea","TextArea",b)Daneel.Debug.CheckArgType(m,"text","string",b)textArea.Text=m;local a3={m}if textArea.newLine~=""then a3=string.split(m,textArea.NewLine)end;local a4=textArea.gameObject.transform:GetLocalScale()local a5=textArea.AreaWidth;if a5~=nil and a5>0 then local a6=table.copy(a3)a3={}for v=1,#a6 do local a7=a6[v]if textArea.textRuler:GetTextWidth(a7)*a4.x>a5 then a7=string.totable(a7)local a8={}for a9,V in ipairs(a7)do table.insert(a8,V)if textArea.textRuler:GetTextWidth(table.concat(a8))*a4.x>a5 then table.remove(a8)table.insert(a3,table.concat(a8))a8={V}if not textArea.WordWrap then a8=nil;break end end end;if a8~=nil then table.insert(a3,table.concat(a8))end else table.insert(a3,a7)end end end;local aa=#a3;local a2=textArea.lineRenderers;local ab=#a2;local ac=textArea.LineHeight/a4.y;local f=textArea.gameObject;local ad={font=textArea.Font,alignment=textArea.Alignment,opacity=textArea.Opacity}local ae=-ac/2;if textArea.VerticalAlignment=="middle"then ae=ac*aa/2-ac/2 elseif textArea.VerticalAlignment=="bottom"then ae=ac*aa-ac/2 end;for v,a7 in ipairs(a3)do ad.text=a7;if a2[v]~=nil then a2[v].gameObject.transform:SetLocalPosition(Vector3:New(0,ae,0))a2[v]:Set(ad)else local af=GameObject.New("TextArea"..textArea.id.."-Line"..v,{parent=f,transform={localPosition=Vector3:New(0,ae,0),localScale=Vector3:New(1)},textRenderer=ad})table.insert(a2,af.textRenderer)end;ae=ae-ac end;if ab>aa then for v=aa+1,ab do a2[v]:SetText("")end end;Daneel.Event.Fire(textArea,"OnUpdate",textArea)Daneel.Debug.StackTrace.EndFunction()end;function GUI.TextArea.GetText(textArea)local b="GUI.TextArea.GetText( textArea ) : "Daneel.Debug.CheckArgType(textArea,"textArea","TextArea",b)return textArea.Text end;function GUI.TextArea.SetAreaWidth(textArea,a5)Daneel.Debug.StackTrace.BeginFunction("GUI.TextArea.SetAreaWidth",textArea,a5)local b="GUI.TextArea.SetAreaWidth( textArea, areaWidth ) : "Daneel.Debug.CheckArgType(textArea,"textArea","TextArea",b)a5=Daneel.Debug.CheckOptionalArgType(a5,"areaWidth",{"string","number"},b,0)a5=math.clamp(GUI.ToSceneUnit(a5),0,9999)if textArea.AreaWidth~=a5 then textArea.AreaWidth=a5;if#textArea.lineRenderers>0 then textArea:SetText(textArea.Text)end end;Daneel.Debug.StackTrace.EndFunction()end;function GUI.TextArea.GetAreaWidth(textArea)local b="GUI.TextArea.GetAreaWidth( textArea ) : "Daneel.Debug.CheckArgType(textArea,"textArea","TextArea",b)return textArea.AreaWidth end;function GUI.TextArea.SetWordWrap(textArea,ag)Daneel.Debug.StackTrace.BeginFunction("GUI.TextArea.SetWordWrap",textArea,ag)local b="GUI.TextArea.SetWordWrap( textArea, wordWrap ) : "Daneel.Debug.CheckArgType(textArea,"textArea","TextArea",b)Daneel.Debug.CheckArgType(ag,"wordWrap","boolean",b)if textArea.WordWrap~=ag then textArea.WordWrap=ag;if#textArea.lineRenderers>0 then textArea:SetText(textArea.Text)end end;Daneel.Debug.StackTrace.EndFunction()end;function GUI.TextArea.GetWordWrap(textArea)local b="GUI.TextArea.GetWordWrap( textArea ) : "Daneel.Debug.CheckArgType(textArea,"textArea","TextArea",b)return textArea.WordWrap end;function GUI.TextArea.SetNewLine(textArea,a8)Daneel.Debug.StackTrace.BeginFunction("GUI.TextArea.SetNewLine",textArea,a8)local b="GUI.TextArea.SetNewLine( textArea, newLine ) : "Daneel.Debug.CheckArgType(textArea,"textArea","TextArea",b)Daneel.Debug.CheckArgType(a8,"newLine","string",b)if textArea.NewLine~=a8 then textArea.NewLine=a8;if#textArea.lineRenderers>0 then textArea:SetText(textArea.Text)end end;Daneel.Debug.StackTrace.EndFunction()end;function GUI.TextArea.GetNewLine(textArea)local b="GUI.TextArea.GetNewLine( textArea ) : "Daneel.Debug.CheckArgType(textArea,"textArea","TextArea",b)return textArea.NewLine end;function GUI.TextArea.SetLineHeight(textArea,ac)Daneel.Debug.StackTrace.BeginFunction("GUI.TextArea.SetLineHeight",textArea,ac)local b="GUI.TextArea.SetLineHeight( textArea, lineHeight ) : "Daneel.Debug.CheckArgType(textArea,"textArea","TextArea",b)Daneel.Debug.CheckArgType(ac,"lineHeight",{"string","number"},b)local ac=GUI.ToSceneUnit(ac)if textArea.LineHeight~=ac then textArea.LineHeight=ac;if#textArea.lineRenderers>0 then textArea:SetText(textArea.Text)end end;Daneel.Debug.StackTrace.EndFunction()end;function GUI.TextArea.GetLineHeight(textArea)local b="GUI.TextArea.GetLineHeight( textArea ) : "Daneel.Debug.CheckArgType(textArea,"textArea","TextArea",b)return textArea.LineHeight end;function GUI.TextArea.SetVerticalAlignment(textArea,verticalAlignment)Daneel.Debug.StackTrace.BeginFunction("GUI.TextArea.SetVerticalAlignment",textArea,verticalAlignment)local b="GUI.TextArea.SetVerticalAlignment( textArea, verticalAlignment ) : "Daneel.Debug.CheckArgType(textArea,"textArea","TextArea",b)Daneel.Debug.CheckArgType(verticalAlignment,"verticalAlignment","string",b)verticalAlignment=Daneel.Debug.CheckArgValue(verticalAlignment,"verticalAlignment",{"top","middle","bottom"},b,GUI.Config.textArea.verticalAlignment)verticalAlignment=string.trim(verticalAlignment:lower())if textArea.VerticalAlignment~=verticalAlignment then textArea.VerticalAlignment=verticalAlignment;if#textArea.lineRenderers>0 then textArea:SetText(textArea.Text)end end;Daneel.Debug.StackTrace.EndFunction()end;function GUI.TextArea.GetVerticalAlignment(textArea)local b="GUI.TextArea.GetVerticalAlignment( textArea ) : "Daneel.Debug.CheckArgType(textArea,"textArea","TextArea",b)return textArea.VerticalAlignment end;function GUI.TextArea.SetFont(textArea,font)Daneel.Debug.StackTrace.BeginFunction("GUI.TextArea.SetFont",textArea,font)local b="GUI.TextArea.SetFont( textArea, font ) : "Daneel.Debug.CheckArgType(textArea,"textArea","TextArea",b)Daneel.Debug.CheckArgType(font,"font",{"string","Font"},b)textArea.textRuler:SetFont(font)font=textArea.textRuler:GetFont()if textArea.Font~=font then textArea.Font=font;if#textArea.lineRenderers>0 then for v,textRenderer in ipairs(textArea.lineRenderers)do textRenderer:SetFont(textArea.Font)end;textArea:SetText(textArea.Text)end end;Daneel.Debug.StackTrace.EndFunction()end;function GUI.TextArea.GetFont(textArea)local b="GUI.TextArea.GetFont( textArea ) : "Daneel.Debug.CheckArgType(textArea,"textArea","TextArea",b)return textArea.Font end;function GUI.TextArea.SetAlignment(textArea,alignment)Daneel.Debug.StackTrace.BeginFunction("GUI.TextArea.SetAlignment",textArea,alignment)local b="GUI.TextArea.SetAlignment( textArea, alignment ) : "Daneel.Debug.CheckArgType(textArea,"textArea","TextArea",b)Daneel.Debug.CheckArgType(alignment,"alignment",{"string","userdata","number"},b)textArea.textRuler:SetAlignment(alignment)alignment=textArea.textRuler:GetAlignment()if textArea.Alignment~=alignment then textArea.Alignment=alignment;if#textArea.lineRenderers>0 then for v,textRenderer in ipairs(textArea.lineRenderers)do textRenderer:SetAlignment(textArea.Alignment)end end end;Daneel.Debug.StackTrace.EndFunction()end;function GUI.TextArea.GetAlignment(textArea)local b="GUI.TextArea.GetAlignment( textArea ) : "Daneel.Debug.CheckArgType(textArea,"textArea","TextArea",b)return textArea.Alignment end;function GUI.TextArea.SetOpacity(textArea,opacity)Daneel.Debug.StackTrace.BeginFunction("GUI.TextArea.SetOpacity",textArea,opacity)local b="GUI.TextArea.SetOpacity( textArea, opacity ) : "Daneel.Debug.CheckArgType(textArea,"textArea","TextArea",b)Daneel.Debug.CheckArgType(opacity,"opacity","number",b)if textArea.Opacity~=opacity then textArea.Opacity=opacity;if#textArea.lineRenderers>0 then for v,textRenderer in ipairs(textArea.lineRenderers)do textRenderer:SetOpacity(opacity)end end end;Daneel.Debug.StackTrace.EndFunction()end;function GUI.TextArea.GetOpacity(textArea)local b="GUI.TextArea.GetOpacity( textArea ) : "Daneel.Debug.CheckArgType(textArea,"textArea","TextArea",b)return textArea.Opacity end;Vector2={}Vector2.__index=Vector2;setmetatable(Vector2,{__call=function(ah,...)return ah.New(...)end})function Vector2.__tostring(ai)return"Vector2: { x="..ai.x..", y="..ai.y.." }"end;function Vector2.New(aj,ak)Daneel.Debug.StackTrace.BeginFunction("Vector2.New",aj,ak)local b="Vector2.New(x, y) : "local al=Daneel.Debug.CheckArgType(aj,"x",{"string","number","Vector2"},b)Daneel.Debug.CheckOptionalArgType(ak,"y",{"string","number"},b)if ak==nil then ak=aj end;local am=setmetatable({x=aj,y=ak},Vector2)if al=="Vector2"then am.x=aj.x;am.y=aj.y end;Daneel.Debug.StackTrace.EndFunction()return am end;function Vector2.GetLength(am)Daneel.Debug.StackTrace.BeginFunction("Vector2.GetLength",am)local b="Vector2.GetLength( vector ) : "Daneel.Debug.CheckArgType(am,"vector","Vector2",b)local length=math.sqrt(am.x^2+am.y^2)Daneel.Debug.StackTrace.EndFunction()return length end;function Vector2.GetSqrLength(am)Daneel.Debug.StackTrace.BeginFunction("Vector2.GetSqrLength",am)local b="Vector2.GetSqrLength( vector ) : "Daneel.Debug.CheckArgType(am,"vector","Vector2",b)local length=am.x^2+am.y^2;Daneel.Debug.StackTrace.EndFunction()return length end;function Vector2.Normalized(am)Daneel.Debug.StackTrace.BeginFunction("Vector2.Normalized",am)local b="Vector2.Normalized( vector ) : "Daneel.Debug.CheckArgType(am,"vector","Vector2",b)local an=Vector2.New(am.x,am.y):Normalize()Daneel.Debug.StackTrace.EndFunction()return an end;function Vector2.Normalize(am)Daneel.Debug.StackTrace.BeginFunction("Vector2.Normalize",am)local b="Vector2.Normalize( vector ) : "Daneel.Debug.CheckArgType(am,"vector","Vector2",b)local length=am:GetLength()if length~=0 then am=am/length end;Daneel.Debug.StackTrace.EndFunction()end;function Vector2.__add(ao,ap)Daneel.Debug.StackTrace.BeginFunction("Vector2.__add",ao,ap)local b="Vector2.__add(a, b) : "Daneel.Debug.CheckArgType(ao,"a","Vector2",b)Daneel.Debug.CheckArgType(ap,"b","Vector2",b)ao=Vector2.New(ao.x+ap.x,ao.y+ap.y)Daneel.Debug.StackTrace.EndFunction()return ao end;function Vector2.__sub(ao,ap)Daneel.Debug.StackTrace.BeginFunction("Vector2.__sub",ao,ap)local b="Vector2.__sub(a, b) : "Daneel.Debug.CheckArgType(ao,"a","Vector2",b)Daneel.Debug.CheckArgType(ap,"b","Vector2",b)ao=Vector2.New(ao.x-ap.x,ao.y-ap.y)Daneel.Debug.StackTrace.EndFunction()return ao end;function Vector2.__mul(ao,ap)Daneel.Debug.StackTrace.BeginFunction("Vector2.__mull",ao,ap)local b="Vector2.__mul(a, b) : "Daneel.Debug.CheckArgType(ao,"a",{"Vector2","number"},b)Daneel.Debug.CheckArgType(ap,"b",{"Vector2","number"},b)local aq=nil;if type(ao)=="number"then aq=Vector2.New(ao*ap.x,ao*ap.y)elseif type(ap)=="number"then aq=Vector2.New(ao.x*ap,ao.y*ap)else aq=Vector2.New(ao.x*ap.x,ao.y*ap.y)end;Daneel.Debug.StackTrace.EndFunction()return aq end;function Vector2.__div(ao,ap)Daneel.Debug.StackTrace.BeginFunction("Vector2.__div",ao,ap)local b="Vector2.__div(a, b) : "Daneel.Debug.CheckArgType(ao,"a",{"Vector2","number"},b)Daneel.Debug.CheckArgType(ap,"b",{"Vector2","number"},b)local aq=nil;if type(ao)=="number"then if ap.x==0 or ap.y==0 then error(b.."One of the components of the denominator is equal to 0. Can't divide by 0 ! a="..ao..", b.x="..ap.x..", b.y="..ap.y)end;aq=Vector2.New(ao/ap.x,ao/ap.y)elseif type(ap)=="number"then if ap==0 then error(b.."The denominator is equal to 0 ! Can't divide by 0 ! a.x="..ao.x..", a.y="..ao.y..", b=0")end;aq=Vector2.New(ao.x/ap,ao.y/ap)else if ap.x==0 or ap.y==0 then error(b.."One of the components of the denominator is equal to 0. Can't divide by 0 ! a.x="..ao.x..", a.y="..ao.y..", b.x="..ap.x..", b.y="..ap.y)end;aq=Vector2.New(ao.x/ap.x,ao.y/ap.y)end;Daneel.Debug.StackTrace.EndFunction()return aq end;function Vector2.__unm(am)Daneel.Debug.StackTrace.BeginFunction("Vector2.__unm",am)local b="Vector2.__unm(vector) : "Daneel.Debug.CheckArgType(am,"vector","Vector2",b)local am=Vector2.New(-am.x,-am.y)Daneel.Debug.StackTrace.EndFunction()return am end;function Vector2.__pow(am,ar)Daneel.Debug.StackTrace.BeginFunction("Vector2.__pow",am,ar)local b="Vector2.__pow(vector, exp) : "Daneel.Debug.CheckArgType(am,"vector","Vector2",b)Daneel.Debug.CheckArgType(ar,"exp","number",b)am=Vector2.New(am.x^ar,am.y^ar)Daneel.Debug.StackTrace.EndFunction()return am end;function Vector2.__eq(ao,ap)Daneel.Debug.StackTrace.BeginFunction("Vector2.__eq",ao,ap)local b="Vector2.__eq(a, b) : "Daneel.Debug.CheckArgType(ao,"a","Vector2",b)Daneel.Debug.CheckArgType(ap,"b","Vector2",b)local as=ao.x==ap.x and ao.y==ap.y;Daneel.Debug.StackTrace.EndFunction()return as end;local at=CraftStudio.Input.GetMousePosition;function CraftStudio.Input.GetMousePosition()Daneel.Debug.StackTrace.BeginFunction("CraftStudio.Input.GetMousePosition")local am=setmetatable(at(),Vector2)Daneel.Debug.StackTrace.EndFunction()return am end;local au=CraftStudio.Input.GetMouseDelta;function CraftStudio.Input.GetMouseDelta()Daneel.Debug.StackTrace.BeginFunction("CraftStudio.Input.GetMouseDelta")local am=setmetatable(au(),Vector2)Daneel.Debug.StackTrace.EndFunction()return am end;local av=CraftStudio.Screen.GetSize;function CraftStudio.Screen.GetSize()Daneel.Debug.StackTrace.BeginFunction("CraftStudio.Screen.GetSize")local am=setmetatable(av(),Vector2)Daneel.Debug.StackTrace.EndFunction()return am end;if CS.DaneelModules==nil then CS.DaneelModules={}end;CS.DaneelModules["GUI"]=GUI;function GUI.DefaultConfig()local aw={cameraName="HUD Camera",cameraGO=nil,originGO=nil,hud={localPosition=setmetatable({x=0,y=0},Vector2),layer=1},toggle={isChecked=false,text="Toggle",checkedMark=":text",uncheckedMark=":text",checkedModel=nil,uncheckedModel=nil},progressBar={height=1,minValue=0,maxValue=100,minLength=0,maxLength=5,value="100%"},slider={minValue=0,maxValue=100,length=5,axis="x",value="0%",OnTextEntered=nil},input={isFocused=false,maxLength=9999,defaultValue=nil,characterRange=nil,focusOnBackgroundClick=true,cursorBlinkInterval=0.5},textArea={areaWidth=0,wordWrap=false,newLine="<br>",lineHeight=1,verticalAlignment="top",font=nil,text="",alignment=nil,opacity=nil},componentObjects={Hud=GUI.Hud,Toggle=GUI.Toggle,ProgressBar=GUI.ProgressBar,Slider=GUI.Slider,Input=GUI.Input,TextArea=GUI.TextArea},componentTypes={},objects={Vector2=Vector2}}return aw end;GUI.Config=GUI.DefaultConfig()function GUI.Load()Daneel.GUI=GUI;if CS.DaneelModules["MouseInput"]==nil and Daneel.Config.debug.enableDebug then print("GUI.Load() : Your project seems to lack the 'Mouse Input' module. It is required for the player to interact with the GUI.Toggle, GUI.Input and GUI.Slider components.")end;function TextRenderer.SetTextWidth(textRenderer,ax)Daneel.Debug.StackTrace.BeginFunction("TextRenderer.SetTextWidth",textRenderer,ax)local b="TextRenderer.SetTextWidth( textRenderer, width ) : "Daneel.Debug.CheckArgType(textRenderer,"textRenderer","TextRenderer",b)local al=Daneel.Debug.CheckArgType(ax,"width",{"number","string"},b)if al=="string"then ax=GUI.ToSceneUnit(ax)end;local ay=textRenderer:GetTextWidth()/textRenderer.gameObject.transform:GetScale()textRenderer.gameObject.transform:SetScale(ax/ay)Daneel.Debug.StackTrace.EndFunction()end end;function GUI.Awake()local e=CS.Screen.GetSize()local az=e.y;if e.x<e.y then az=e.x end;GUI.Config.cameraGO=GameObject.Get(GUI.Config.cameraName)if GUI.Config.cameraGO~=nil then GUI.pixelsToUnits=GUI.Config.cameraGO.camera:GetOrthographicScale()/az;GUI.Config.originGO=CS.CreateGameObject("HUD Origin")GUI.Config.originGO:SetParent(GUI.Config.cameraGO)GUI.Config.originGO.transform:SetLocalPosition(Vector3:New(-e.x*GUI.pixelsToUnits/2,e.y*GUI.pixelsToUnits/2,0))end end
Tween={}local function a(tweener)Daneel.Debug.StackTrace.BeginFunction("GetTweenerProperty",tweener)local b=nil;if tweener.target~=nil then b=tweener.target[tweener.property]if b==nil then local c="Get"..string.ucfirst(tweener.property)if tweener.target[c]~=nil then b=tweener.target[c](tweener.target)end end end;Daneel.Debug.StackTrace.EndFunction()return b end;local function d(tweener,b)Daneel.Debug.StackTrace.BeginFunction("SetTweenerProperty",tweener,b)if tweener.target~=nil then if tweener.target[tweener.property]==nil then local c="Set"..string.ucfirst(tweener.property)if tweener.target[c]~=nil then tweener.target[c](tweener.target,tweener.property)end else tweener.target[tweener.property]=b end end;Daneel.Debug.StackTrace.EndFunction()end;Tween.Tweener={tweeners={}}Tween.Tweener.__index=Tween.Tweener;setmetatable(Tween.Tweener,{__call=function(e,...)return e.New(...)end})function Tween.Tweener.__tostring(tweener)return"Tweener: "..tweener.id end;function Tween.Tweener.New(f,g,h,i,j)if not Daneel.isAwake then Daneel.LateLoad("Tween.Tweener.New")end;Daneel.Debug.StackTrace.BeginFunction("Tween.Tweener.New",f,g,h,i,j)local k="Tween.Tweener.New(target, property, endValue, duration[, params]) : "local tweener=table.copy(Tween.Config.tweener)setmetatable(tweener,Tween.Tweener)tweener.id=Daneel.Cache.GetId()if type(f)=="number"then k="Tween.Tweener.New(startValue, endValue, duration[, params]) : "Daneel.Debug.CheckArgType(h,"duration","number",k)Daneel.Debug.CheckOptionalArgType(i,"params","table",k)tweener.startValue=f;tweener.endValue=g;tweener.duration=h;if i~=nil then tweener:Set(i)end elseif g==nil then Daneel.Debug.CheckArgType(f,"params","table",k)k="Tween.Tweener.New(params) : "tweener:Set(f)else Daneel.Debug.CheckArgType(f,"target","table",k)Daneel.Debug.CheckArgType(g,"property","string",k)Daneel.Debug.CheckArgType(i,"duration","number",k)Daneel.Debug.CheckOptionalArgType(j,"params","table",k)tweener.target=f;tweener.property=g;tweener.endValue=h;tweener.duration=i;if j~=nil then tweener:Set(j)end end;if tweener.startValue==nil then tweener.startValue=a(tweener)end;if tweener.target~=nil then tweener.gameObject=tweener.target.gameObject end;Tween.Tweener.tweeners[tweener.id]=tweener;Daneel.Debug.StackTrace.EndFunction()return tweener end;function Tween.Tweener.Set(tweener,j)Daneel.Debug.StackTrace.BeginFunction("Tween.Tweener.Set",tweener,j)local k="Tween.Tweener.Set(tweener, params) : "Daneel.Debug.CheckArgType(tweener,"tweener","Tween.Tweener",k)for l,b in pairs(j)do tweener[l]=b end;Daneel.Debug.StackTrace.EndFunction()return tweener end;function Tween.Tweener.Play(tweener)if tweener.isEnabled==false then return end;Daneel.Debug.StackTrace.BeginFunction("Tween.Tweener.Play",tweener)local k="Tween.Tweener.Play(tweener) : "Daneel.Debug.CheckArgType(tweener,"tweener","Tween.Tweener",k)tweener.isPaused=false;Daneel.Event.Fire(tweener,"OnPlay",tweener)Daneel.Debug.StackTrace.EndFunction()end;function Tween.Tweener.Pause(tweener)if tweener.isEnabled==false then return end;Daneel.Debug.StackTrace.BeginFunction("Tween.Tweener.Pause",tweener)local k="Tween.Tweener.Pause(tweener) : "Daneel.Debug.CheckArgType(tweener,"tweener","Tween.Tweener",k)tweener.isPaused=true;Daneel.Event.Fire(tweener,"OnPause",tweener)Daneel.Debug.StackTrace.EndFunction()end;function Tween.Tweener.Restart(tweener)if tweener.isEnabled==false then return end;Daneel.Debug.StackTrace.BeginFunction("Tween.Tweener.Restart",tweener)local k="Tween.Tweener.Restart(tweener) : "Daneel.Debug.CheckArgType(tweener,"tweener","Tween.Tweener",k)tweener.elapsed=0;tweener.fullElapsed=0;tweener.elapsedDelay=0;tweener.completedLoops=0;tweener.isCompleted=false;tweener.hasStarted=false;local startValue=tweener.startValue;if tweener.loopType=="yoyo"and tweener.completedLoops%2~=0 then startValue=tweener.endValue end;if tweener.target~=nil then d(tweener,startValue)end;tweener.value=startValue;Daneel.Debug.StackTrace.EndFunction()end;function Tween.Tweener.Complete(tweener)if tweener.isEnabled==false or tweener.loops==-1 then return end;Daneel.Debug.StackTrace.BeginFunction("Tween.Tweener.Complete",tweener)local k="Tween.Tweener.Complete( tweener ) : "Daneel.Debug.CheckArgType(tweener,"tweener","Tween.Tweener",k)tweener.isCompleted=true;local h=tweener.endValue;if tweener.loopType=="yoyo"then if tweener.loops%2==0 and tweener.completedLoops%2==0 or tweener.loops%2~=0 and tweener.completedLoops%2~=0 then h=tweener.startValue end end;if tweener.target~=nil then d(tweener,h)end;tweener.value=h;Daneel.Event.Fire(tweener,"OnComplete",tweener)if tweener.destroyOnComplete then tweener:Destroy()end;Daneel.Debug.StackTrace.EndFunction()end;function Tween.Tweener.IsTargetDestroyed(tweener)if tweener.target~=nil then if tweener.target.isDestroyed then return true end;if tweener.target.gameObject~=nil and tweener.target.gameObject.isDestroyed or tweener.target.gameObject.inner==nil then return true end end;if tweener.gameObject~=nil and tweener.gameObject.isDestroyed or tweener.gameObject.inner==nil then return true end;return false end;function Tween.Tweener.Destroy(tweener)Daneel.Debug.StackTrace.BeginFunction("Tween.Tweener.Destroy",tweener)local k="Tween.Tweener.Destroy( tweener ) : "Daneel.Debug.CheckArgType(tweener,"tweener","Tween.Tweener",k)tweener.isEnabled=false;tweener.isPaused=true;tweener.target=nil;tweener.duration=0;Tween.Tweener.tweeners[tweener.id]=nil;CraftStudio.Destroy(tweener)Daneel.Debug.StackTrace.EndFunction()end;function Tween.Tweener.Update(tweener,m)if tweener.isEnabled==false then return end;Daneel.Debug.StackTrace.BeginFunction("Tween.Tweener.Update",tweener,m)local k="Tween.Tweener.Update(tweener[, deltaDuration]) : "Daneel.Debug.CheckArgType(tweener,"tweener","Tween.Tweener",k)Daneel.Debug.CheckArgType(m,"deltaDuration","number",k)if Tween.Ease[tweener.easeType]==nil then if Daneel.Config.debug.enableDebug then print("Tween.Tweener.Update() : Easing '"..tostring(tweener.easeType).."' for tweener ID '"..tween.id.."' does not exists. Setting it back for the default easing '"..Tween.Config.tweener.easeType.."'.")end;tweener.easeType=Tween.Config.tweener.easeType end;if m~=nil then tweener.elapsed=tweener.elapsed+m;tweener.fullElapsed=tweener.fullElapsed+m end;local b=nil;if tweener.elapsed>tweener.duration then tweener.isCompleted=true;tweener.elapsed=tweener.duration;if tweener.isRelative==true then b=tweener.startValue+tweener.endValue else b=tweener.endValue end else b=Tween.Ease[tweener.easeType](tweener.elapsed,tweener.startValue,tweener.diffValue,tweener.duration)end;if tweener.target~=nil then d(tweener,b)end;tweener.value=b;Daneel.Event.Fire(tweener,"OnUpdate",tweener)Daneel.Debug.StackTrace.EndFunction()end;Tween.Timer={}Tween.Timer.__index=Tween.Tweener;setmetatable(Tween.Timer,{__call=function(e,...)return e.New(...)end})function Tween.Timer.New(i,n,o,j)if not Daneel.isAwake then Daneel.LateLoad("Tween.Timer.New")end;Daneel.Debug.StackTrace.BeginFunction("Tween.Timer.New",i,n,o,j)local k="Tween.Timer.New( duration, callback[, isInfiniteLoop, params] ) : "if type(o)=="table"then j=o;k="Tween.Timer.New( duration, callback[, params] ) : "end;Daneel.Debug.CheckArgType(i,"duration","number",k)Daneel.Debug.CheckArgType(n,"callback",{"function","userdata"},k)Daneel.Debug.CheckOptionalArgType(j,"params","table",k)local tweener=table.copy(Tween.Config.tweener)setmetatable(tweener,Tween.Tweener)tweener.id=Daneel.Cache.GetId()tweener.startValue=i;tweener.endValue=0;tweener.duration=i;if o==true then tweener.loops=-1;tweener.OnLoopComplete=n else tweener.OnComplete=n end;if j~=nil then tweener:Set(j)end;Tween.Tweener.tweeners[tweener.id]=tweener;Daneel.Debug.StackTrace.EndFunction()return tweener end;if CS.DaneelModules==nil then CS.DaneelModules={}end;CS.DaneelModules["Tween"]=Tween;function Tween.DefaultConfig()local p={tweener={isEnabled=true,isPaused=false,delay=0.0,duration=0.0,durationType="time",startValue=nil,endValue=0.0,loops=0,loopType="simple",easeType="linear",isRelative=false,destroyOnComplete=true,destroyOnSceneLoad=true,updateInterval=1,Id=-1,hasStarted=false,isCompleted=false,elapsed=0,fullElapsed=0,elapsedDelay=0,completedLoops=0,diffValue=0.0,value=0.0,frameCount=0},objects={["Tween.Tweener"]=Tween.Tweener}}return p end;Tween.Config=Tween.DefaultConfig()function Tween.Load()Daneel.Tween=Tween end;function Tween.Awake()for id,tweener in pairs(Tween.Tweener.tweeners)do if tweener.destroyOnSceneLoad then tweener:Destroy()end end end;function Tween.Update()for id,tweener in pairs(Tween.Tweener.tweeners)do if tweener:IsTargetDestroyed()then tweener:Destroy()end;if tweener.isEnabled==true and tweener.isPaused==false and tweener.isCompleted==false and tweener.duration>0 then tweener.frameCount=tweener.frameCount+1;if tweener.frameCount%tweener.updateInterval==0 then local m=Daneel.Time.deltaTime*tweener.updateInterval;if tweener.durationType=="realTime"then m=Daneel.Time.realDeltaTime*tweener.updateInterval elseif tweener.durationType=="frame"then m=tweener.updateInterval end;if m>0 then if tweener.elapsedDelay>=tweener.delay then if tweener.hasStarted==false then tweener.hasStarted=true;if tweener.startValue==nil then if tweener.target~=nil then tweener.startValue=a(tweener)else error("Tween.Update() : startValue is nil but no target is set for tweener with Id '"..tweener.id.."'")end elseif tweener.target~=nil then d(tweener,tweener.startValue)end;tweener.value=tweener.startValue;if tweener.isRelative==true then tweener.diffValue=tweener.endValue else tweener.diffValue=tweener.endValue-tweener.startValue end;Daneel.Event.Fire(tweener,"OnStart",tweener)end;tweener:Update(m)else tweener.elapsedDelay=tweener.elapsedDelay+m end;if tweener.isCompleted==true then tweener.completedLoops=tweener.completedLoops+1;if tweener.loops==-1 or tweener.completedLoops<tweener.loops then tweener.isCompleted=false;tweener.elapsed=0;if tweener.loopType:lower()=="yoyo"then local startValue=tweener.startValue;if tweener.isRelative then tweener.startValue=tweener.value;tweener.endValue=-tweener.endValue;tweener.diffValue=tweener.endValue else tweener.startValue=tweener.endValue;tweener.endValue=startValue;tweener.diffValue=-tweener.diffValue end elseif tweener.target~=nil then d(tweener,tweener.startValue)end;tweener.value=tweener.startValue;Daneel.Event.Fire(tweener,"OnLoopComplete",tweener)else Daneel.Event.Fire(tweener,"OnComplete",tweener)if tweener.destroyOnComplete and tweener.Destroy~=nil then tweener:Destroy()end end end end end end end end;local pow=math.pow;local sin=math.sin;local cos=math.cos;local pi=math.pi;local sqrt=math.sqrt;local abs=math.abs;local asin=math.asin;local function q(r,t,u,v)return u*r/v+t end;local function w(r,t,u,v)r=r/v;return u*pow(r,2)+t end;local function x(r,t,u,v)r=r/v;return-u*r*r-2+t end;local function y(r,t,u,v)r=r/v*2;if r<1 then return u/2*pow(r,2)+t else return-u/2*(r-1)*r-3-1+t end end;local function z(r,t,u,v)if r<v/2 then return x(r*2,t,u/2,v)else return w(r*2-v,t+u/2,u/2,v)end end;local function A(r,t,u,v)r=r/v;return u*pow(r,3)+t end;local function B(r,t,u,v)r=r/v-1;return u*pow(r,3)+1+t end;local function C(r,t,u,v)r=r/v*2;if r<1 then return u/2*r*r*r+t else r=r-2;return u/2*r*r*r+2+t end end;local function D(r,t,u,v)if r<v/2 then return B(r*2,t,u/2,v)else return A(r*2-v,t+u/2,u/2,v)end end;local function E(r,t,u,v)r=r/v;return u*pow(r,4)+t end;local function F(r,t,u,v)r=r/v-1;return-u*pow(r,4)-1+t end;local function G(r,t,u,v)r=r/v*2;if r<1 then return u/2*pow(r,4)+t else r=r-2;return-u/2*pow(r,4)-2+t end end;local function H(r,t,u,v)if r<v/2 then return F(r*2,t,u/2,v)else return E(r*2-v,t+u/2,u/2,v)end end;local function I(r,t,u,v)r=r/v;return u*pow(r,5)+t end;local function J(r,t,u,v)r=r/v-1;return u*pow(r,5)+1+t end;local function K(r,t,u,v)r=r/v*2;if r<1 then return u/2*pow(r,5)+t else r=r-2;return u/2*pow(r,5)+2+t end end;local function L(r,t,u,v)if r<v/2 then return J(r*2,t,u/2,v)else return I(r*2-v,t+u/2,u/2,v)end end;local function M(r,t,u,v)return-u*cos(r/v*pi/2)+u+t end;local function N(r,t,u,v)return u*sin(r/v*pi/2)+t end;local function O(r,t,u,v)return-u/2*cos(pi*r/v)-1+t end;local function P(r,t,u,v)if r<v/2 then return N(r*2,t,u/2,v)else return M(r*2-v,t+u/2,u/2,v)end end;local function Q(r,t,u,v)if r==0 then return t else return u*pow(2,10*r/v-1)+t-u*0.001 end end;local function R(r,t,u,v)if r==v then return t+u else return u*1.001*-pow(2,-10*r/v)+1+t end end;local function S(r,t,u,v)if r==0 then return t end;if r==v then return t+u end;r=r/v*2;if r<1 then return u/2*pow(2,10*r-1)+t-u*0.0005 else r=r-1;return u/2*1.0005*-pow(2,-10*r)+2+t end end;local function T(r,t,u,v)if r<v/2 then return R(r*2,t,u/2,v)else return Q(r*2-v,t+u/2,u/2,v)end end;local function U(r,t,u,v)r=r/v;return-u*sqrt(1-pow(r,2))-1+t end;local function V(r,t,u,v)r=r/v-1;return u*sqrt(1-pow(r,2))+t end;local function W(r,t,u,v)r=r/v*2;if r<1 then return-u/2*sqrt(1-r*r)-1+t else r=r-2;return u/2*sqrt(1-r*r)+1+t end end;local function X(r,t,u,v)if r<v/2 then return V(r*2,t,u/2,v)else return U(r*2-v,t+u/2,u/2,v)end end;local function Y(r,t,u,v,Z,_)if r==0 then return t end;r=r/v;if r==1 then return t+u end;if not _ then _=v*0.3 end;local s;if not Z or Z<abs(u)then Z=u;s=_/4 else s=_/2*pi*asin(u/Z)end;r=r-1;return-(Z*pow(2,10*r)*sin((r*v-s)*2*pi/_))+t end;local function a0(r,t,u,v,Z,_)if r==0 then return t end;r=r/v;if r==1 then return t+u end;if not _ then _=v*0.3 end;local s;if not Z or Z<abs(u)then Z=u;s=_/4 else s=_/2*pi*asin(u/Z)end;return Z*pow(2,-10*r)*sin((r*v-s)*2*pi/_)+u+t end;local function a1(r,t,u,v,Z,_)if r==0 then return t end;r=r/v*2;if r==2 then return t+u end;if not _ then _=v*0.3*1.5 end;if not Z then Z=0 end;if not Z or Z<abs(u)then Z=u;s=_/4 else s=_/2*pi*asin(u/Z)end;if r<1 then r=r-1;return-0.5*Z*pow(2,10*r)*sin((r*v-s)*2*pi/_)+t else r=r-1;return Z*pow(2,-10*r)*sin((r*v-s)*2*pi/_)*0.5+u+t end end;local function a2(r,t,u,v,Z,_)if r<v/2 then return a0(r*2,t,u/2,v,Z,_)else return Y(r*2-v,t+u/2,u/2,v,Z,_)end end;local function a3(r,t,u,v,s)if not s then s=1.70158 end;r=r/v;return u*r*r*(s+1)*r-s+t end;local function a4(r,t,u,v,s)if not s then s=1.70158 end;r=r/v-1;return u*r*r*(s+1)*r+s+1+t end;local function a5(r,t,u,v,s)if not s then s=1.70158 end;s=s*1.525;r=r/v*2;if r<1 then return u/2*r*r*(s+1)*r-s+t else r=r-2;return u/2*r*r*(s+1)*r+s+2+t end end;local function a6(r,t,u,v,s)if r<v/2 then return a4(r*2,t,u/2,v,s)else return a3(r*2-v,t+u/2,u/2,v,s)end end;local function a7(r,t,u,v)r=r/v;if r<1/2.75 then return u*7.5625*r*r+t elseif r<2/2.75 then r=r-1.5/2.75;return u*7.5625*r*r+0.75+t elseif r<2.5/2.75 then r=r-2.25/2.75;return u*7.5625*r*r+0.9375+t else r=r-2.625/2.75;return u*7.5625*r*r+0.984375+t end end;local function a8(r,t,u,v)return u-a7(v-r,0,u,v)+t end;local function a9(r,t,u,v)if r<v/2 then return a8(r*2,0,u,v)*0.5+t else return a7(r*2-v,0,u,v)*0.5+u*.5+t end end;local function aa(r,t,u,v)if r<v/2 then return a7(r*2,t,u/2,v)else return a8(r*2-v,t+u/2,u/2,v)end end;Tween.Ease={linear=q,inQuad=w,outQuad=x,inOutQuad=y,outInQuad=z,inCubic=A,outCubic=B,inOutCubic=C,outInCubic=D,inQuart=E,outQuart=F,inOutQuart=G,outInQuart=H,inQuint=I,outQuint=J,inOutQuint=K,outInQuint=L,inSine=M,outSine=N,inOutSine=O,outInSine=P,inExpo=Q,outExpo=R,inOutExpo=S,outInExpo=T,inCirc=U,outCirc=V,inOutCirc=W,outInCirc=X,inElastic=Y,outElastic=a0,inOutElastic=a1,outInElastic=a2,inBack=a3,outBack=a4,inOutBack=a5,outInBack=a6,inBounce=a8,outBounce=a7,inOutBounce=a9,outInBounce=aa}