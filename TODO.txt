==========
IDEAS

    -----
    MISC

    - A voir avec TextRenderer > permettre de facilement sauter des lignes (avec :br:) ou définir un wordWrap
    - modelRenderer:SetDimension(Vector3) ou idem avec Vector2
    - est-ce que LuaDoc permet d'avoir plusieurs doc pour la même fonction ? si on veut avoir plusieurs construteurs


    - introduire plus de callback. 
        - gameObject.OnNewComponent(gameObject, component)
        - gameObject.OnDestroyComponent(gameObject, component)


    -----
    GUI

    - Input
        - param size qui limite la taille du champs mais pas du texte (flèches font se déplacer le texte)
    
    - "progress bar" mais avec plusieurs éléments
    lorsque élément pas utilisé, il a opacity, scale etc au choix dans la config, donc
      out et in state  


    -----
    TWEEN

    pour le param "property" > si la propriété n'existe pas, essayer d'utiliser les getter/setter correspondant à la place   
            

    Sequences
        > simple stack de tweeners qui jouent les un après les autres
        lorsque la sequence joue, elle prend le premier tween, le fait joue, lorsqu'il est complèté, il est supprimé de la liste puis la sequence prend le nouveau tweeners arrivé en tête de liste
        > forcer isPaused à true, enpècher les loop infinies
        > comment détecter la fin d'un tweener sans réécrire OnComplete ? : si le tweener a une propriété sequence, appel d'une fonction "PlayNext()"
            

        > timeline
        les clés des tweeners sont un temps (temps, temps réel ou frame)
        à chaque frame, on vérif si le temp existe comme clé puis on comence à jouer les tweener qui y snt stockés 

        methods
            Play
            Pause
            Restart > les tweeners ne doivent pas être supprimés lorsque terminé
            Complete > est-ce que cela complete tous les tweeners ?
            Destroy > loop sur ses tweeners pour les enlever de Daneel.Tween.Tweener.tweeners

            Insert(time, tweener) > lorsque timeline

        params
            isEnabled
            isPaused
            hasStarted
            isCompleted

            delay

            isTimeline
            timeType > le time est un Daneel.Time.time, realTime ou frames
            isRelative > les temps indiqué sont relatifs au temps de début de la sequence (un temps de 5 signifie 5sec après que delay soit terminé)

            stackId > id dans la sequence, du tween qui joue actuellement

            loops
            completedLoops
            loopType


    Ray/TextRenderer > vérifier que les ray pourront intersecter les TextRenderer


==========
A implémenter

    -----
    DEVELOP 


    LORSQUE LA NOUVELLE VERSION DE CS EST SORTIE
    - enlever l'orthographic scale en dure dans Daneel.Awake()
    - enlever commentaire autour de TextRenderer.SetFont()
    - décommenter nouveaux component dans la config

    - remplacer les sendCallback par Event.Fire()
        implémenter les events avec les triggers, mouseinteractive

    - Vector2:GetLength() math.sqrt( self.x ^ 2 + self.y ^ 2 )
    

    -----
    GUI

    - HUD
        - positionnnement Global + local sans besoin de parenter le gameObject
        - GetPosition en calculant la position à partir des parents ou de la position 3D


    ScriptedBehaviors pour ajouter les composants et les initialiser lorsque dans l'éditeur de scène :
    - HUD avec propriétés (string) (A voit lorsque Hud sera refait avec position globale et locale)
        - positionX
        - positionY

    - Slider
        minValue
        maxValue
        minLength
        maxLength
        progress

        model comme handle avec script Mouseinteractive

    -----
    TWEEN

    tweener.OnLoopCompleted

    Sequence


==========
A tester

    - exemples des events dans la doc

==========
A modifier/ajouter dans la doc :

    - GUI
    - Tween

    - callback : page à part + function list + sidebar


=========
BUGS


