==========
IDEAS

    -----
    MISC

    - modelRenderer:SetDimension(Vector3) ou idem avec Vector2

    - GameObject : permettre de chainer des GameObject.Get() et GameObject.GetChild() en séparents plusieurs nom de GO par un point
    ie : GameObject.Get("Menu.Lang.French")     gameObject:GetChild("Lang.French")
    > permet d'obtenir facilement des GO dont le nom n'est pas unique
    

    - textRenderer
        - permettre de définir un font et aligment par défaut (pour n'importe quel component)
        - permettre de féfinir l'alignement avec simplement "left", "right", "center"
            - idem pour camera projection mode et tous les autre enums
        - permettre de facilement sauter des lignes (avec :br:) ou définir un wordWrap ?? > nécessite plusieurs GO et composants
            > pas possible sans ScriptedBehavior, voir ci dessous
        - permettre de passer texte traduit via la scène : "daneellang:langkey"
            > TextRenderer.Settext n'est pas utilisée lorsque les textes sont écrits dans la scène
            mais voir à créer un ScriptedBehavior qui irait remplacer le texte

        - TextAreaRenderer : afficher un texte multi-ligne, avec <br>, wordWrap, alignment top bottom, middle
       
    - possibilité de enable/disable un gameObject ou un component
        > empèhe les composants de GUI d'être mis à jour
        > voir plutôt avec Elisée pour autoriser ça sur les gameObjects


    - Debug.DrawLine(start, end[, model]) ou (start, direction, length[, model])
        config.debug.defaultLineModel


    -----
    GUI

    - Input
        - curseur et tout ce qui va avec
    
    - "progress bar" mais avec plusieurs éléments
    lorsque élément pas utilisé, il a opacity, scale etc au choix dans la config, donc
      out et in state  

    
    -----
    TWEEN

    - tweener
        permettre de tweener en même temps plusieurs valeur/propriétés

    - tweener spécialisé "timer"  / duration oncomplete durationtype onloopcomplete, loops
    Timer(duration, OnComplete, params)
    Timer(duration, OnLoopComplete, true, params)


    - Timeline
        table de tweeners. clés = temps, valeur = tweeners
        fait débuter les tweeners en fonction du temps
        fonction : Play, Pause, Restart, Complete, Destroy, Update

    - stack de tweeners qui débutent les uns après les autres
        réécrire la fonction OnComplete pour lancer le prochain tweener (timeline:StartNext())
        propriété current qui point vers le tweenr courant

    - commaun au stack et tweeners : 


    -----
    MODULE / PLUGIN / EXTENSION

    - voir plus en profondeur comment Composer (php), node.js font pour gérer ça
    - module = un object global, sur lequel existe ou non les fonctions Config, Load, Awake, Start, Update
    - permettre dépendances (un module oblige d'autre à se charger aussi)
    - liste des modules chargés + empècher plusieurs chargements du même modules


==========
A implémenter
    
    - Trigger : rajouter argument range à GetGameObjectInRange

    - text renderer scale    aligment via text


==========
A tester

    - voir pourquoi certains easeType renvoient des erreurs
    

==========
A modifier/ajouter dans la doc :

    - Example project : minimalist encounter


=========
BUGS

    - parfois, une ligne de la stacktrace n'est pas complète : #04 GameObject.Ge)
        > quadn argument attendus est nil ?


OLD

    - utiliser Awake au lieu de start dans CheckBox, et créer une checkBox via le ScriptedBehavior envoie un exception

    > créer le scriptedBehavior de la checkBox depuis CheckBox.New() lorsqu'il existait déjà renvoie cette exception

    Exception non gérée : System.InvalidOperationException: La collection a été modifiée ; l'opération d'énumération peut ne pas s'exécuter.


=========

ordre chargement des fichiers :
- dans l'ordre de création (id d'asset croissant)
- dernier script modifié sans faire de révision depuis le dernier export est chargé en premier


