==========
IDEAS

    -----
    MISC

    - DEBUG
        - introduire un CheckArgValue, CheckOptionalArgValue > remplace CheckAssetType(), CheckComponentType()

    - A voir avec TextRenderer > permettre de facilement sauter des lignes (avec :br:) ou définir un wordWrap
    - modelRenderer:SetDimension(Vector3) ou idem avec Vector2

    - système plus flexible que TimedUpdate afin qu'un object s'inscrive à un event récurent
        Event.ListenRecuringEvent(time, TimedUpdate, object)
        Event.Ask

    - revoir l'utilisation de error(), print() et de la stacktrace
        lorsque debug activé, la localisation des erreurs se trouve toujours dans dans Daneel

        il faut que error() utiliser dans n'importe quel fichier puisse afficher la stacktrace > pas possible sans la réécrire

        CheckArgType() va toujours retourner l'erreur depuis Daneel.lua, mais on a le nom de la fonction impliquée

        Debug.Beginfunction("function name", {
            {
                name = "argumentName",
                value = argValue,
                expectedType = Type, > appel CheckArgType
                expectedValue = Values, > appel auto CheckValue ou checkDefault Value
                defaultValue = "machin" > si expectedType or Value sont définits, fait appeler la version "optional" des fonctions
            },

            minimun info = argValue
        })
        > cette fonction enregistre la stacktrace
        et fait appeler Debug.Check.. en fonction des valeurs trouvées


    -----
    GUI

    - Input
        - param size qui limite la taille du champs mais pas du texte (flèches font se déplacer le texte)
    
    - "progress bar" mais avec plusieurs éléments
    lorsque élément pas utilisé, il a opacity, scale etc au choix dans la config, donc
      out et in state  


    -----
    TWEEN


==========
A implémenter


    -----
    DEVELOP 


    LORSQUE LA NOUVELLE VERSION DE CS EST SORTIE
    - enlever l'orthographic scale en dure dans Daneel.Awake()
    - enlever commentaire autour de TextRenderer.SetFont()
    - décommenter nouveaux component dans la config
    - commentaire dans ray:IntersectsGameObject()

    - enlever les valeurs par défautl dans config.language + implémenter valeur par défaut dans Daneel.Lang.get()

    -----
    GUI

    ScriptedBehaviors pour ajouter les composants et les initialiser lorsque dans l'éditeur de scène :

    - Slider
        minValue
        maxValue
        minLength
        maxLength
        progress

        model comme handle avec script Mouseinteractive

    -----
    TWEENER


==========
A tester

    - exemples des events dans la doc
    - voir pourquoi certains eseType renvoient des erreurs

    - set localPosition à la création ne fonctionne toujours pas, voir idem avec set de parent
        > solution , fire un event une frame plus tard

==========
A modifier/ajouter dans la doc :

    - GUI
        - slider

    - Example project : minimalist encounter

=========
BUGS

    - parfois, une ligne de la stacktrace n'est pas complète : #04 GameObject.Ge)
        > quadn argument attendus est nil ?


