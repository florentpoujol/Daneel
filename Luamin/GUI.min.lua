GUI={}local a="string"local b="boolean"local c="number"local d="table"local e="GameObject"local f="Vector2"local g="Vector3"local h={"gameObject",e}local i={"params",d,defaultValue={}}local j={"params",d}function GUI.ToSceneUnit(k,l)if type(k)=="string"then k=k:trim()if k:find("px")then if l~=nil and getmetatable(l)==GameObject then l=l.camera end;if l==nil then error("GUI.ToSceneUnit(value, camera) : Can't convert the value '"..k.."' from pixels to scene units because no camera component has been passed as argument.")end;k=tonumber(k:sub(0,#k-2))*l:GetPixelsToUnits()elseif k:find("u")then k=tonumber(k:sub(0,#k-1))else k=tonumber(k)end end;return k end;function GUI.ToPixel(k,m,l)if type(k)=="string"then if type(m)=="table"then l=m;m=nil end;k=k:trim()local n=CS.Screen.GetSize()if k:find("px")then k=tonumber(k:sub(0,#k-2))elseif k:find("%",1,true)and m~=nil then k=n[m]*tonumber(k:sub(0,#k-1))/100 elseif k:find("s")and m~=nil then k=k:sub(2)if k==""then k=0 end;k=n[m]+tonumber(k)elseif k:find("u")then if l==nil then error("GUI.ToPixel(value, camera) : Can't convert the value '"..k.."' from pixels to scene units because no camera component has been passed as argument.")end;k=tonumber(k:sub(0,#k-1))/l:GetPixelsToUnits()else k=tonumber(k)end end;return k end;local function o(p,q)local r=p:GetInAncestors(function(e)if e.camera~=nil then return true end end)if r==nil and q~=nil then error(q..": The "..tostring(p).." isn't a child of a game object with a camera component and no camera game object is passed via the 'params' argument.")end;return r end;GUI.Hud={}GUI.Hud.__index=GUI.Hud;function GUI.Hud.CreateOriginGO(p)if p.camera==nil then error("GUI.Hud.CreateOriginGO(): Provided game object "..tostring(p).." has no camera component.")end;local s=p.camera:GetPixelsToUnits()local n=CS.Screen.GetSize()local t=CS.CreateGameObject("Hud Origin for camera "..p:GetName(),p)t.transform:SetLocalPosition(Vector3:New(-n.x*s/2,n.y*s/2,0))p.hudOriginGO=t end;function GUI.Hud.ToHudPosition()error("GUI.Hud.ToHudPosition() is deprecated since v1.5.0. Use Camera.WorldToScreenPoint() or Camera.Project() instead.")end;function Vector2.EnsureNumberPixel(u,l)u.x=GUI.ToPixel(u.x,"x",l)u.y=GUI.ToPixel(u.y,"y",l)return u end;function GUI.Hud.New(p,v)local w=setmetatable({},GUI.Hud)w.gameObject=p;p.hud=w;w.id=Daneel.Utilities.GetId()v=v or{}w.cameraGO=v.cameraGO or o(p,"GUI.Hud.New()")if w.cameraGO.hudOriginGO==nil then GUI.Hud.CreateOriginGO(w.cameraGO)end;w:Set(table.merge(GUI.Config.hud,v))return w end;function GUI.Hud.SetPosition(w,x)x:EnsureNumberPixel(w.cameraGO.camera)local y=w.cameraGO.hudOriginGO.transform:GetPosition()+Vector3:New(x.x*w.cameraGO.camera:GetPixelsToUnits(),-x.y*w.cameraGO.camera:GetPixelsToUnits(),0)y.z=w.gameObject.transform:GetPosition().z;w.gameObject.transform:SetPosition(y)end;function GUI.Hud.GetPosition(w)local x=w.gameObject.transform:GetPosition()-w.cameraGO.hudOriginGO.transform:GetPosition()x=x/w.cameraGO.camera:GetPixelsToUnits()return Vector2.New(math.round(x.x),math.round(-x.y))end;function GUI.Hud.SetLocalPosition(w,x)x:EnsureNumberPixel(w.cameraGO.camera)local z=w.gameObject.parent or w.cameraGO.hudOriginGO;local y=z.transform:GetPosition()+Vector3:New(x.x*w.cameraGO.camera:GetPixelsToUnits(),-x.y*w.cameraGO.camera:GetPixelsToUnits(),0)y.z=w.gameObject.transform:GetPosition().z;w.gameObject.transform:SetPosition(y)end;function GUI.Hud.GetLocalPosition(w)local z=w.gameObject.parent or w.cameraGO.hudOriginGO;local x=w.gameObject.transform:GetPosition()-z.transform:GetPosition()x=x/w.cameraGO.camera:GetPixelsToUnits()return Vector2.New(math.round(x.x),math.round(-x.y))end;function GUI.Hud.SetLayer(w,A)local B=w.cameraGO.hudOriginGO.transform:GetPosition().z;local C=w.gameObject.transform:GetPosition()w.gameObject.transform:SetPosition(Vector3:New(C.x,C.y,B-A))end;function GUI.Hud.GetLayer(w)local B=w.cameraGO.hudOriginGO.transform:GetPosition().z;return math.round(B-w.gameObject.transform:GetPosition().z,1)end;function GUI.Hud.SetLocalLayer(w,A)local z=w.gameObject.parent or w.cameraGO.hudOriginGO;local B=z.transform:GetPosition().z;local C=w.gameObject.transform:GetPosition()w.gameObject.transform:SetPosition(Vector3:New(C.x,C.y,B-A))end;function GUI.Hud.GetLocalLayer(w)local z=w.gameObject.parent or w.cameraGO.hudOriginGO;local B=z.transform:GetPosition().z;return math.round(B-w.gameObject.transform:GetPosition().z,1)end;local D={"hud","Hud"}table.mergein(Daneel.functionsDebugInfo,{["GUI.Hud.CreateOriginGO"]={h},["GUI.Hud.New"]={h,i},["GUI.Hud.SetPosition"]={D,{"position",f}},["GUI.Hud.GetPosition"]={D},["GUI.Hud.SetLocalPosition"]={D,{"position",f}},["GUI.Hud.GetLocalPosition"]={D},["GUI.Hud.SetLayer"]={D,{"layer",c}},["GUI.Hud.GetLayer"]={D},["GUI.Hud.SetLocalLayer"]={D,{"layer",c}},["GUI.Hud.GetLocalLayer"]={D}})GUI.Toggle={}GUI.Toggle.__index=GUI.Toggle;function GUI.Toggle.New(p,v)if Daneel.modules.MouseInput==nil then error("GUI.Toggle.New(): The 'Mouse Input' module is missing from your project. It is required for the player to interact with the GUI.Toggle, GUI.Input and GUI.Slider components.")end;local E=table.copy(GUI.Config.toggle)E.defaultText=E.text;E.text=nil;E.gameObject=p;E.id=Daneel.Utilities.GetId()setmetatable(E,GUI.Toggle)if v~=nil then E:Set(v)end;p.toggle=E;p:AddTag("guiComponent")p.OnNewComponent=function(F)if F==nil then return end;local G=getmetatable(F)if G==TextRenderer then local H=F:GetText()if H==nil then H=E.defaultText end;E:SetText(H)elseif G==ModelRenderer and E.checkedModel~=nil then if E.isChecked and E.checkedModel~=nil then F:SetModel(E.checkedModel)elseif not E.isChecked and E.uncheckedModel~=nil then F:SetModel(E.uncheckedModel)end end end;p.OnClick=function()if not(E.group~=nil and E.isChecked)then E:Check(not E.isChecked)end end;if p.textRenderer~=nil and p.textRenderer:GetText()~=nil then E:SetText(p.textRenderer:GetText())end;if p.modelRenderer~=nil then if E.isChecked and E.checkedModel~=nil then E.gameObject.modelRenderer:SetModel(E.checkedModel)elseif not E.isChecked and E.uncheckedModel~=nil then E.gameObject.modelRenderer:SetModel(E.uncheckedModel)end end;E:Check(E.isChecked,true)return E end;function GUI.Toggle.SetText(E,H)if E.gameObject.textRenderer~=nil then if E.isChecked==true then H=Daneel.Utilities.ReplaceInString(E.checkedMark,{text=H})else H=Daneel.Utilities.ReplaceInString(E.uncheckedMark,{text=H})end;E.gameObject.textRenderer:SetText(H)else if Daneel.Config.debug.enableDebug then print("WARNING: GUI.Toggle.SetText(toggle, text): Can't set the toggle's text because no TextRenderer component has been found on the gameObject '"..tostring(E.gameObject).."'. Waiting for a TextRenderer to be added.")end;E.defaultText=H end end;function GUI.Toggle.GetText(E)local H=nil;if E.gameObject.textRenderer~=nil then H=E.gameObject.textRenderer:GetText()if H==nil then H=E.defaultText end;local I=E.checkedMark;if not E.isChecked then I=E.uncheckedMark end;local J,K=I:find(":text")if J~=nil and K~=nil then local L=I:sub(1,J-1)local M=I:sub(K+1)H=H:gsub(L,""):gsub(M,"")end elseif Daneel.Config.debug.enableDebug then print("WARNING: GUI.Toggle.GetText(toggle): Can't get the toggle's text because no TextRenderer component has been found on the gameObject '"..tostring(E.gameObject).."'. Returning nil.")end;return H end;function GUI.Toggle.Check(E,N,O)if N==nil then N=true end;if O==true or E.isChecked~=N then local H=nil;if E.gameObject.textRenderer~=nil then H=E:GetText()end;E.isChecked=N;if E.gameObject.textRenderer~=nil then E:SetText(H)end;if E.gameObject.modelRenderer~=nil then if N==true and E.checkedModel~=nil then E.gameObject.modelRenderer:SetModel(E.checkedModel)elseif N==false and E.uncheckedModel~=nil then E.gameObject.modelRenderer:SetModel(E.uncheckedModel)end end;Daneel.Event.Fire(E,"OnUpdate",E)if E.Group~=nil and N==true then local P=GameObject.GetWithTag(E.Group)for Q,p in ipairs(P)do if p~=E.gameObject then p.toggle:Check(false,true)end end end end end;function GUI.Toggle.SetGroup(E,R)if R==nil and E.Group~=nil then E.gameObject:RemoveTag(E.Group)else if E.Group~=nil then E.gameObject:RemoveTag(E.Group)end;E:Check(false)E.Group=R;E.gameObject:AddTag(E.Group)end end;function GUI.Toggle.GetGroup(E)return E.Group end;function GUI.Toggle.Set(E,v)local R=v.group;v.group=nil;local S=v.isChecked;v.isChecked=nil;for T,k in pairs(v)do E[T]=k end;if R~=nil then E:SetGroup(R)end;if S~=nil then E:Check(S)end end;local U={"toggle","Toggle"}table.mergein(Daneel.functionsDebugInfo,{["GUI.Toggle.New"]={h,i},["GUI.Toggle.Set"]={U,j},["GUI.Toggle.SetText"]={U,{"text",a}},["GUI.Toggle.GetText"]={U},["GUI.Toggle.Check"]={U,{"state",defaultValue=true},{"forceUpdate",defaultValue=false}},["GUI.Toggle.SetGroup"]={U,{"group",a,isOptional=true}},["GUI.Toggle.GetGroup"]={U}})GUI.ProgressBar={}GUI.ProgressBar.__index=GUI.ProgressBar;function GUI.ProgressBar.New(p,v)local V=table.copy(GUI.Config.progressBar)V.gameObject=p;V.id=Daneel.Utilities.GetId()V.value=nil;setmetatable(V,GUI.ProgressBar)v=v or{}if v.value==nil then v.value=GUI.Config.progressBar.value end;V.cameraGO=v.cameraGO or o(p)V:Set(v)p.progressBar=V;return V end;function GUI.ProgressBar.SetValue(V,k)local q="GUI.ProgressBar.SetValue(progressBar, value) : "local W=V.minValue;local X=V.maxValue;local Y=nil;if type(k)=="string"then if k:endswith("%")then Y=tonumber(k:sub(1,#k-1))/100;local Z=Y;Y=math.clamp(Y,0.0,1.0)if Y~=Z and Daneel.Config.debug.enableDebug then print(q.."WARNING : value in percentage with value '"..k.."' is below 0% or above 100%.")end;k=(X-W)*Y+W else k=tonumber(k)end end;local _=k;k=math.clamp(k,W,X)V.minLength=GUI.ToSceneUnit(V.minLength,V.cameraGO)V.maxLength=GUI.ToSceneUnit(V.maxLength,V.cameraGO)local a0=V:GetValue()if k~=a0 then if k~=_ and Daneel.Config.debug.enableDebug then print(q.." WARNING : value with value '".._.."' is out of its boundaries : min='"..W.."', max='"..X.."'")end;local a1=X-W;Y=(k-W)/a1;V.height=GUI.ToSceneUnit(V.height,V.cameraGO)local a2=(V.maxLength-V.minLength)*Y+V.minLength;local a3=V.gameObject.transform:GetLocalScale()V.gameObject.transform:SetLocalScale(Vector3:New(a2,V.height,a3.z))Daneel.Event.Fire(V,"OnUpdate",V)end end;GUI.ProgressBar.SetProgress=GUI.ProgressBar.SetValue;function GUI.ProgressBar.UpdateValue(V,k,a4)if k==V._value then return end;V._value=k;local W=V.minValue;local X=V.maxValue;local a5=V.minLength;local Y=nil;if type(k)=="string"then local a6=k;k=tonumber(k)if k==nil then Y=tonumber(a6:sub(1,#a6-1))/100 end end;if Y==nil then local a1=X-W;Y=(k-W)/a1 end;Y=math.clamp(Y,0.0,1.0)local a2=(V.maxLength-a5)*Y+a5;local a3=V.gameObject.transform:GetLocalScale()V.gameObject.transform:SetLocalScale(Vector3:New(a2,V.height,a3.z))if a4==true then Daneel.Event.Fire(V,"OnUpdate",V)end end;GUI.ProgressBar.UpdateProgress=GUI.ProgressBar.UpdateValue;function GUI.ProgressBar.GetValue(V,a7)local a8=math.round(V.gameObject.transform:GetLocalScale().x,2)local a1=V.maxLength-V.minLength;local k=(a8-V.minLength)/a1;if a7==true then k=k*100 else k=(V.maxValue-V.minValue)*k+V.minValue end;return k end;GUI.ProgressBar.GetProgress=GUI.ProgressBar.GetValue;function GUI.ProgressBar.SetHeight(V,a9)local a3=V.gameObject.transform:GetLocalScale()local a9=GUI.ToSceneUnit(a9,V.cameraGO)V.gameObject.transform:SetLocalScale(Vector3:New(a3.x,a9,a3.z))end;function GUI.ProgressBar.GetHeight(V)return V.gameObject.transform:GetLocalScale().y end;function GUI.ProgressBar.Set(V,v)local k=v.value;v.value=nil;if k==nil then k=V:GetValue()end;for T,k in pairs(v)do V[T]=k end;V:SetValue(k)end;local aa={"progressBar","ProgressBar"}table.mergein(Daneel.functionsDebugInfo,{["GUI.ProgressBar.New"]={h,i},["GUI.ProgressBar.Set"]={aa,j},["GUI.ProgressBar.SetValue"]={aa,{"value",{a,c}}},["GUI.ProgressBar.GetValue"]={aa,{"getAsPercentage",defaultValue=false}},["GUI.ProgressBar.SetHeight"]={aa,{"height",{a,c}}},["GUI.ProgressBar.GetHeight"]={aa}})GUI.Slider={}GUI.Slider.__index=GUI.Slider;function GUI.Slider.New(p,v)if Daneel.modules.MouseInput==nil then error("GUI.Slider.New(): The 'Mouse Input' module is missing from your project. It is required for the player to interact with the GUI.Toggle, GUI.Input and GUI.Slider components.")end;local ab=table.copy(GUI.Config.slider)ab.gameObject=p;ab.id=Daneel.Utilities.GetId()ab.value=nil;ab.parent=ab.gameObject:GetParent()if ab.parent==nil then local e=CS.CreateGameObject("SliderParent")e.transform:SetPosition(ab.gameObject.transform:GetPosition())ab.gameObject:SetParent(e)end;setmetatable(ab,GUI.Slider)p.slider=ab;p:AddTag("guiComponent")p.OnDrag=function()local ac=CraftStudio.Input.GetMouseDelta()local ad=Vector3:New(ac.x,0,0)if ab.axis=="y"then ad=Vector3:New(0,-ac.y,0,0)end;p.transform:Move(ad*ab.cameraGO.camera:GetPixelsToUnits())local ae=p.transform:GetPosition()local af=ab.parent.transform:GetPosition()if ab.axis=="x"and ae.x<af.x then ab:SetValue(ab.minValue)elseif ab.axis=="y"and ae.y<af.y then ab:SetValue(ab.minValue)elseif ab:GetValue()>ab.maxValue then ab:SetValue(ab.maxValue)else Daneel.Event.Fire(ab,"OnUpdate",ab)end end;v=v or{}ab.cameraGO=v.cameraGO or o(p,"GUI.Slider.New()")if v.value==nil then v.value=GUI.Config.slider.value end;ab:Set(v)return ab end;function GUI.Slider.SetValue(ab,k)local q="GUI.Slider.SetValue( slider, value ) : "local X=ab.maxValue;local W=ab.minValue;local ag=nil;if type(k)=="string"then if k:endswith("%")then ag=tonumber(k:sub(1,#k-1))/100;k=(X-W)*ag+W else k=tonumber(k)end end;local _=k;k=math.clamp(k,W,X)if k~=_ and Daneel.Config.debug.enableDebug then print(q.."WARNING : Argument 'value' with value '".._.."' is out of its boundaries : min='"..W.."', max='"..X.."'")end;local a1=X-W;ag=(k-W)/a1;ab.length=GUI.ToSceneUnit(ab.length,ab.cameraGO)local ah=-Vector3:Left()if ab.axis=="y"then ah=Vector3:Up()end;local ai=Vector3.Rotate(ah,ab.gameObject.transform:GetOrientation())local y=ab.parent.transform:GetPosition()+ai*ab.length*ag;ab.gameObject.transform:SetPosition(y)Daneel.Event.Fire(ab,"OnUpdate",ab)end;function GUI.Slider.GetValue(ab,a7)local ag=Vector3.Distance(ab.parent.transform:GetPosition(),ab.gameObject.transform:GetPosition())/ab.length;local k=ag*100;if a7~=true then k=(ab.maxValue-ab.minValue)*ag+ab.minValue end;return k end;function GUI.Slider.Set(ab,v)local k=v.value;v.value=nil;if k==nil then k=ab:GetValue()end;for T,k in pairs(v)do ab[T]=k end;ab:SetValue(k)end;GUI.Input={}GUI.Input.__index=GUI.Input;function GUI.Input.New(p,v)if Daneel.modules.MouseInput==nil then error("GUI.Input.New(): The 'Mouse Input' module is missing from your project. It is required for the player to interact with the GUI.Toggle, GUI.Input and GUI.Slider components.")end;v=v or{}local aj=table.merge(GUI.Config.input,v)aj.gameObject=p;aj.id=Daneel.Utilities.GetId()setmetatable(aj,GUI.Input)if aj.OnTextEntered==nil then aj.OnTextEntered=function(ak)if aj.isFocused then local al=string.byte(ak)if al==8 then local H=p.textRenderer:GetText()aj:Update(H:sub(1,#H-1),true)elseif al>=32 and al<=127 then if aj.characterRange~=nil and aj.characterRange:find(ak,1,true)==nil then return end;aj:Update(ak)end end end end;local am=p:GetChild("Cursor")if am~=nil then aj.cursorGO=am;am.tweener=Tween.Timer(aj.cursorBlinkInterval,function(an)if an.gameObject==nil or an.gameObject.inner==nil then an:Destroy()return end;local ao=1;if an.gameObject.modelRenderer:GetOpacity()==1 then ao=0 end;an.gameObject.modelRenderer:SetOpacity(ao)end,true)am.tweener.isPaused=true;am.tweener.gameObject=am end;local ap=aj.isFocused;aj.isFocused=nil;aj:Focus(ap)p.input=aj;p:AddTag("guiComponent")local aq=p:GetChild("Background")if aq~=nil then aj.backgroundGO=aq;if aj.focusOnBackgroundClick then aq:AddTag("guiComponent")end end;aj.OnLeftMouseButtonJustPressed=function()local ar=p.isMouseOver;if ar~=true and aj.focusOnBackgroundClick and aj.backgroundGO~=nil then ar=aj.backgroundGO.isMouseOver end;if ar==nil then ar=false end;aj:Focus(ar)end;Daneel.Event.Listen("OnLeftMouseButtonJustPressed",aj)aj.OnValidateInputButtonJustPressed=function()if aj.isFocused then Daneel.Event.Fire(aj,"OnValidate",aj)end end;Daneel.Event.Listen("OnValidateInputButtonJustPressed",aj)return aj end;function GUI.Input.Focus(aj,ar)if ar==nil then ar=true end;if aj.isFocused~=ar then aj.isFocused=ar;local H=string.trim(aj.gameObject.textRenderer:GetText())if ar==true then CS.Input.OnTextEntered(aj.OnTextEntered)if H==aj.defaultValue then aj.gameObject.textRenderer:SetText("")end else CS.Input.OnTextEntered(nil)if aj.defaultValue~=nil and aj.defaultValue~=""and H==""then aj.gameObject.textRenderer:SetText(aj.defaultValue)end end;Daneel.Event.Fire(aj,"OnFocus",aj)aj:UpdateCursor()end end;function GUI.Input.UpdateCursor(aj)if aj.cursorGO~=nil then local as=aj.gameObject.textRenderer:GetAlignment()if as~=TextRenderer.Alignment.Right then local at=aj.gameObject.textRenderer:GetTextWidth()if as==TextRenderer.Alignment.Center then at=at/2 end;aj.cursorGO.transform:SetLocalPosition(Vector3:New(at,0,0))end;local ao=0;if aj.isFocused then ao=1 end;aj.cursorGO.modelRenderer:SetOpacity(ao)aj.cursorGO.tweener.isPaused=not aj.isFocused;Daneel.Event.Fire(aj.cursorGO,"OnUpdate",aj)end end;function GUI.Input.Update(aj,H,au)local av=aj.gameObject.textRenderer:GetText()if not au then H=av..H end;if#H>aj.maxLength then H=H:sub(1,aj.maxLength)end;if av~=H then aj.gameObject.textRenderer:SetText(H)Daneel.Event.Fire(aj,"OnUpdate",aj)aj:UpdateCursor()end end;local aw={"slider","Slider"}local ax={"input","Input"}table.mergein(Daneel.functionsDebugInfo,{["GUI.Slider.New"]={h,i},["GUI.Slider.Set"]={aw,j},["GUI.Slider.SetValue"]={aw,{"value",{a,c}}},["GUI.Slider.GetValue"]={aw,{"getAsPercentage",defaultValue=false}},["GUI.Input.New"]={h,i},["GUI.Input.Focus"]={ax,{"focus",defaultValue=true}},["GUI.Input.UpdateCursor"]={ax},["GUI.Input.Update"]={ax,{"text",a},{"replaceText",defaultValue=false}}})GUI.TextArea={}GUI.TextArea.__index=GUI.TextArea;function GUI.TextArea.New(p,v)local ay={}ay.gameObject=p;p.textArea=ay;ay.id=Daneel.Utilities.GetId()ay.lineGOs={}setmetatable(ay,GUI.TextArea)ay.textRuler=p.textRenderer;if ay.textRuler==nil then ay.textRuler=p:CreateComponent("TextRenderer")end;ay.textRuler:SetText("")v=v or{}ay.cameraGO=v.cameraGO or o(p)ay:Set(table.merge(GUI.Config.textArea,v))return ay end;function GUI.TextArea.Set(ay,v)local az=ay.lineGOs;ay.lineGOs={}local H=v.text;v.text=nil;for T,k in pairs(v)do ay[T]=k end;ay.lineGOs=az;if H==nil then H=ay.Text end;ay:SetText(H)end;function GUI.TextArea.SetText(ay,H)ay.Text=H;local aA={H}if ay.newLine~=""then aA=string.split(H,ay.NewLine)end;local aB=ay.gameObject.transform:GetLocalScale()local aC=ay.AreaWidth;if aC~=nil and aC>0 then local aD=table.copy(aA)aA={}for Q=1,#aD do local aE=aD[Q]if ay.textRuler:GetTextWidth(aE)*aB.x>aC then aE=string.totable(aE)local aF={}for aG,ak in ipairs(aE)do table.insert(aF,ak)if ay.textRuler:GetTextWidth(table.concat(aF))*aB.x>aC then table.remove(aF)table.insert(aA,table.concat(aF))aF={ak}if not ay.WordWrap then aF=nil;break end end end;if aF~=nil then table.insert(aA,table.concat(aF))end else table.insert(aA,aE)end end end;if type(ay.linesFilter)=="function"then aA=ay.linesFilter(ay,aA)or aA end;local aH=#aA;local az=ay.lineGOs;local aI=#az;local aJ=ay.LineHeight/aB.y;local p=ay.gameObject;local aK={font=ay.Font,alignment=ay.Alignment,opacity=ay.Opacity}local aL=-aJ/2;if ay.VerticalAlignment=="middle"then aL=aJ*aH/2-aJ/2 elseif ay.VerticalAlignment=="bottom"then aL=aJ*aH-aJ/2 end;for Q=1,aH do local aE=aA[Q]aK.text=aE;if az[Q]~=nil then az[Q].transform:SetLocalPosition(Vector3:New(0,aL,0))az[Q].textRenderer:Set(aK)else local aM=CS.CreateGameObject("TextArea"..ay.id.."-Line"..Q,p)aM.transform:SetLocalPosition(Vector3:New(0,aL,0))aM.transform:SetLocalScale(Vector3:New(1))aM:CreateComponent("TextRenderer")aM.textRenderer:Set(aK)table.insert(az,aM)end;aL=aL-aJ end;if aH<aI then for Q=aH+1,aI do az[Q].textRenderer:SetText("")end end;Daneel.Event.Fire(ay,"OnUpdate",ay)end;function GUI.TextArea.GetText(ay)return ay.Text end;function GUI.TextArea.AddLine(ay,aE,aN)local H=ay.Text;if aN==true then H=aE..ay.NewLine..H else if H~=""and not string.endswith(H,ay.NewLine)then aE=ay.NewLine..aE end;H=H..aE end;ay:SetText(H)end;function GUI.TextArea.SetAreaWidth(ay,aC)aC=math.clamp(GUI.ToSceneUnit(aC,ay.cameraGO),0,999)if ay.AreaWidth~=aC then ay.AreaWidth=aC;if#ay.lineGOs>0 then ay:SetText(ay.Text)end end end;function GUI.TextArea.GetAreaWidth(ay)return ay.AreaWidth end;function GUI.TextArea.SetWordWrap(ay,aO)if ay.WordWrap~=aO then ay.WordWrap=aO;if#ay.lineGOs>0 then ay:SetText(ay.Text)end end end;function GUI.TextArea.GetWordWrap(ay)return ay.WordWrap end;function GUI.TextArea.SetNewLine(ay,aF)if ay.NewLine~=aF then ay.NewLine=aF;if#ay.lineGOs>0 then ay:SetText(ay.Text)end end end;function GUI.TextArea.GetNewLine(ay)return ay.NewLine end;function GUI.TextArea.SetLineHeight(ay,aJ)local aJ=GUI.ToSceneUnit(aJ,ay.cameraGO)if ay.LineHeight~=aJ then ay.LineHeight=aJ;if#ay.lineGOs>0 then ay:SetText(ay.Text)end end end;function GUI.TextArea.GetLineHeight(ay)return ay.LineHeight end;function GUI.TextArea.SetVerticalAlignment(ay,aP)local q="GUI.TextArea.SetVerticalAlignment( textArea, verticalAlignment ) : "aP=Daneel.Debug.CheckArgValue(aP,"verticalAlignment",{"top","middle","bottom"},q,GUI.Config.textArea.verticalAlignment)aP=string.trim(aP:lower())if ay.VerticalAlignment~=aP then ay.VerticalAlignment=aP;if#ay.lineGOs>0 then ay:SetText(ay.Text)end end end;function GUI.TextArea.GetVerticalAlignment(ay)return ay.VerticalAlignment end;function GUI.TextArea.SetFont(ay,aQ)ay.textRuler:SetFont(aQ)aQ=ay.textRuler:GetFont()if ay.Font~=aQ then ay.Font=aQ;if#ay.lineGOs>0 then for Q=1,#ay.lineGOs do ay.lineGOs[Q].textRenderer:SetFont(ay.Font)end;ay:SetText(ay.Text)end end end;function GUI.TextArea.GetFont(ay)return ay.Font end;function GUI.TextArea.SetAlignment(ay,as)ay.textRuler:SetAlignment(as)as=ay.textRuler:GetAlignment()if ay.Alignment~=as then ay.Alignment=as;for Q=1,#ay.lineGOs do ay.lineGOs[Q].textRenderer:SetAlignment(ay.Alignment)end end end;function GUI.TextArea.GetAlignment(ay)return ay.Alignment end;function GUI.TextArea.SetOpacity(ay,ao)if ay.Opacity~=ao then ay.Opacity=ao;for Q=1,#ay.lineGOs do ay.lineGOs[Q].textRenderer:SetOpacity(ao)end end end;function GUI.TextArea.GetOpacity(ay)return ay.Opacity end;local aR={"textArea","TextArea"}table.mergein(Daneel.functionsDebugInfo,{["GUI.TextArea.New"]={{"gameObject",e},{"params",d,isOptional=true}},["GUI.TextArea.Set"]={aR,j},["GUI.TextArea.SetText"]={aR,{"text",a}},["GUI.TextArea.GetText"]={aR},["GUI.TextArea.AddLine"]={aR,{"line",a},{"prepend",defaultValue=false}},["GUI.TextArea.SetAreaWidth"]={aR,{"areaWidth",{a,c},defaultValue=0}},["GUI.TextArea.GetAreaWidth"]={aR},["GUI.TextArea.SetWordWrap"]={aR,{"wordWrap",defaultValue=false}},["GUI.TextArea.GetWordWrap"]={aR},["GUI.TextArea.SetNewLine"]={aR,{"newLine",a}},["GUI.TextArea.GetNewLine"]={aR},["GUI.TextArea.SetLineHeight"]={aR,{"lineHeight",{a,c}}},["GUI.TextArea.GetLineHeight"]={aR},["GUI.TextArea.SetVerticalAlignment"]={aR,{"verticalAlignment",a}},["GUI.TextArea.GetVerticalAlignment"]={aR},["GUI.TextArea.SetFont"]={aR,{"font",{a,"Font"}}},["GUI.TextArea.GetFont"]={aR},["GUI.TextArea.SetAlignment"]={aR,{"alignment",{a,"userdata",c}}},["GUI.TextArea.GetAlignment"]={aR},["GUI.TextArea.SetOpacity"]={aR,{"opacity",c}},["GUI.TextArea.GetOpacity"]={aR}})Daneel.modules.GUI=GUI;function GUI.DefaultConfig()local aS={cameraName="HUD Camera",cameraGO=nil,originGO=nil,hud={},toggle={isChecked=false,text="Toggle",checkedMark=":text",uncheckedMark=":text",checkedModel=nil,uncheckedModel=nil},progressBar={height=1,minValue=0,maxValue=100,minLength=0,maxLength=5,value="100%"},slider={minValue=0,maxValue=100,length=5,axis="x",value="0%",OnTextEntered=nil},input={isFocused=false,maxLength=9999,defaultValue=nil,characterRange=nil,focusOnBackgroundClick=true,cursorBlinkInterval=0.5},textArea={areaWidth=0,wordWrap=false,newLine="<br>",lineHeight=1,verticalAlignment="top",font=nil,text="",alignment=nil,opacity=nil},componentObjects={Hud=GUI.Hud,Toggle=GUI.Toggle,ProgressBar=GUI.ProgressBar,Slider=GUI.Slider,Input=GUI.Input,TextArea=GUI.TextArea},componentTypes={},propertiesByComponentName={hud={"position","localPosition","layer","localLayer"},progressBar={"value","height"},slider={"value"},textArea={"areaWidth","lineHeight","opacity"}}}return aS end;GUI.Config=GUI.DefaultConfig()function GUI.Load()if Daneel.modules.Tween then table.mergein(Tween.Config.propertiesByComponentName,GUI.Config.propertiesByComponentName)end end