Daneel={}Daneel.modules={moduleNames={}}setmetatable(Daneel.modules,{__newindex=function(a,b,c)table.insert(Daneel.modules.moduleNames,b)rawset(Daneel.modules,b,c)end})Daneel.functionsDebugInfo={}function string.split(d,e,f)local g={}if f then local h,i=d:find(e)if h~=nil then local j=e;e=d:sub(h,i)if string.startswith(d,e)then d=d:sub(#e+1,#d)end;if not d:endswith(e)then d=d..e end;if CS.IsWebPlayer then for k in d:gmatch("([^"..j.."]+)"..j)do table.insert(g,k)end else for k in d:gmatch("(.-)"..j)do table.insert(g,k)end end end else if d:find(e,1,true)~=nil then if string.startswith(d,e)then d=d:sub(#e+1,#d)end;if not d:endswith(e)then d=d..e end;local l=""local m=string.totable(d)local n=1;while n<=#m do local o=m[n]if o==e or d:sub(n,n-1+#e)==e then table.insert(g,l)l=""n=n+#e else l=l..o;n=n+1 end end;if#l>0 then table.insert(g,l)end end end;if#g==0 then g={d}end;return g end;function table.deepmerge(...)return table.merge(...,true)end;function table.print(p)if p==nil then print("table.print( t ) : Provided table is nil.")return end;local q=tostring(p)local r=Daneel.Debug.ToRawString(p)if q~=r then q=q.." / "..r end;print("~~~~~ table.print("..q..") ~~~~~ Start ~~~~~")local s=pairs;if table.getlength(p)==0 then print("Table is empty.")elseif table.isarray(p)then s=ipairs end;for t,u in s(p)do print(t,u)end;print("~~~~~ table.print("..q..") ~~~~~ End ~~~~~")end;function table.getlength(p,v)local w=0;if v~=nil then v=v:lower()end;for t,u in pairs(p)do if v==nil or type(t)==v or Daneel.Debug.GetType(t):lower()==v then w=w+1 end end;return w end;local d="string"local x="boolean"local y="number"local p="table"local z="function"local A="userdata"local B={"s",d}local C={"t",p}table.mergein(Daneel.functionsDebugInfo,{["math.isinteger"]={{"number"}},["math.lerp"]={{"a",y},{"b",y},{"factor",y},{"easing",d,isOptional=true}},["math.warpangle"]={{"angle",y}},["math.round"]={{"value",y},{"decimal",y,isOptional=true}},["tonumber2"]={{"data"}},["string.totable"]={B},["string.ucfirst"]={B},["string.lcfirst"]={B},["string.trimstart"]={B},["string.trimend"]={B},["string.trim"]={B},["string.endswith"]={B,{"chunk",d}},["string.startswith"]={B,{"chunk",d}},["string.split"]={B,{"delimiter",d},{"delimiterIsPattern",x,defaultValue=false}},["table.print"]={},["table.merge"]={},["table.mergein"]={},["table.getkeys"]={C},["table.getvalues"]={C},["table.reverse"]={C},["table.reindex"]={C},["table.getvalue"]={C,{"keys",d}},["table.setvalue"]={C,{"keys",d}},["table.getkey"]={C,{"value"}},["table.copy"]={C,{"recursive",x,defaultValue=false}},["table.containsvalue"]={C,{"value"},{"ignoreCase",x,defaultValue=false}},["table.isarray"]={C,{"strict",x,defaultValue=true}},["table.shift"]={C,{"returnKey",x,defaultValue=false}},["table.getlength"]={C,{"keyType",d,isOptional=true}},["table.havesamecontent"]={{"table1",p},{"table2",p}},["table.combine"]={C,{"values","table"},{"returnFalseIfNotSameLength",x,isOptional=true}},["table.removevalue"]={C,{"value"},{"maxRemoveCount",y,isOptional=true}},["table.sortby"]={C,{"property",d},{"orderBy",d,isOptional=true}}})Daneel.Utilities={}function Daneel.Utilities.CaseProof(D,E)if type(E)=="string"then E={E}end;local F=D:lower()for n,G in pairs(E)do if F==G:lower()then D=G;break end end;return D end;function Daneel.Utilities.ReplaceInString(string,H)for I,J in pairs(H)do string=string:gsub(":"..I,J)end;return string end;function Daneel.Utilities.AllowDynamicGettersAndSetters(K,L)function K.__index(M,t)local N=t;if type(t)=="string"then N=string.ucfirst(t)end;if t==N then if K[t]~=nil then return K[t]end;if L~=nil then for n,O in ipairs(L)do if O[t]~=nil then return O[t]end end end else local P="Get"..N;if K[P]~=nil then return K[P](M)elseif K[t]~=nil then return K[t]end;if L~=nil then for n,O in ipairs(L)do if O[P]~=nil then return O[P](M)elseif O[t]~=nil then return O[t]end end end end;return nil end;function K.__newindex(M,t,u)local N=t;if type(t)=="string"then N=string.ucfirst(t)end;if t~=N then local P="Set"..N;if K[P]~=nil then return K[P](M,u)end end;return rawset(M,t,u)end end;function Daneel.Utilities.ToNumber(Q)return tonumber2(Q)end;local R={}function Daneel.Utilities.ButtonExists(S)if R[S]==nil then R[S]=Daneel.Debug.Try(function()CS.Input.WasButtonJustPressed(S)end)end;return R[S]end;Daneel.Utilities.id=0;function Daneel.Utilities.GetId(T)if T~=nil and type(T)=="table"then local U=rawget(T,"id")if U~=nil then return U end;U=Daneel.Utilities.GetId()if T.inner~=nil and not CS.IsWebPlayer then U=tonumber(tostring(T.inner):match("%d+"))end;if U==nil then U="[no id]"end;rawset(T,"id",U)return U else Daneel.Utilities.id=Daneel.Utilities.id+1;return Daneel.Utilities.id end end;Daneel.Cache={GetId=Daneel.Utilities.GetId}table.mergein(Daneel.functionsDebugInfo,{["Daneel.Utilities.CaseProof"]={{"name",d},{"set",{d,p}}},["Daneel.Utilities.ReplaceInString"]={{"string",d},{"replacements",p}},["Daneel.Utilities.ButtonExists"]={{"buttonName",d}}})Daneel.Debug={}function Daneel.Debug.CheckArgType(V,W,X,Y)if type(V)=="table"and getmetatable(V)==GameObject and V.inner==nil then error(Y.."Provided argument '"..W.."' is a destroyed game object '"..tostring(V))end;if not Daneel.Config.debug.enableDebug then return Daneel.Debug.GetType(V)end;local Z="Daneel.Debug.CheckArgType(argument, argumentName, expectedArgumentTypes[, p_errorHead]) : "local _=type(W)if _~="string"then error(Z.."Argument 'argumentName' is of type '".._.."' with value '"..tostring(W).."' instead of 'string'.")end;_=type(X)if _~="string"and _~="table"then error(Z.."Argument 'expectedArgumentTypes' is of type '".._.."' with value '"..tostring(X).."' instead of 'string' or 'table'.")end;if _=="string"then X={X}elseif#X<=0 then error(Z.."Argument 'expectedArgumentTypes' is an empty table.")end;_=type(Y)if _~="nil"and _~="string"then error(Z.."Argument 'p_errorHead' is of type '".._.."' with value '"..tostring(Y).."' instead of 'string'.")end;if Y==nil then Y=""end;_=Daneel.Debug.GetType(V)local a0=type(V)for n,a1 in ipairs(X)do if _==a1 or a0==a1 then return a1 end end;error(Y.."Argument '"..W.."' is of type '".._.."' with value '"..tostring(V).."' instead of '"..table.concat(X,"', '").."'.")end;function Daneel.Debug.CheckOptionalArgType(V,W,X,Y,a2)if V==nil then return a2 end;if not Daneel.Config.debug.enableDebug then return V end;local Z="Daneel.Debug.CheckOptionalArgType(argument, argumentName, expectedArgumentTypes[, p_errorHead, defaultValue]) : "local _=type(W)if _~="string"then error(Z.."Argument 'argumentName' is of type '".._.."' with value '"..tostring(W).."' instead of 'string'.")end;_=type(X)if _~="string"and _~="table"then error(Z.."Argument 'expectedArgumentTypes' is of type '".._.."' with value '"..tostring(X).."' instead of 'string' or 'table'.")end;if _=="string"then X={X}elseif#X<=0 then error(Z.."Argument 'expectedArgumentTypes' is an empty table.")end;_=type(Y)if _~="nil"and _~="string"then error(Z.."Argument 'p_errorHead' is of type '".._.."' with value '"..tostring(Y).."' instead of 'string'.")end;if Y==nil then Z=""end;_=Daneel.Debug.GetType(V)local a0=type(V)for n,a1 in ipairs(X)do if _==a1 or a0==a1 then return V end end;error(Y.."Optional argument '"..W.."' is of type '".._.."' with value '"..tostring(V).."' instead of '"..table.concat(X,"', '").."'.")end;function Daneel.Debug.GetType(T,a3)local Z="Daneel.Debug.GetType( object[, luaTypeOnly] ) : "local _=type(a3)if _~="nil"and _~="boolean"then error(Z.."Argument 'luaTypeOnly' is of type '".._.."' with value '"..tostring(a3).."' instead of 'boolean'.")end;if a3==nil then a3=false end;_=type(T)if not a3 and _=="table"then local a4=getmetatable(T)if a4~=nil then if getmetatable(a4)==Script then return"ScriptedBehavior"end;if Daneel.Config.objects~=nil then for type,T in pairs(Daneel.Config.objects)do if a4==T then return type end end end;for type,T in pairs(_G)do if a4==T then return type end end end end;return _ end;oerror=error;function Daneel.Debug.SetNewError()function error(a5,a6)if Daneel.Config.debug.enableDebug and a6~=true then Daneel.Debug.StackTrace.Print()end;oerror(a5)end end;function Daneel.Debug.Disable(a7)if a7~=nil then a7=" : "..tostring(a7)end;print("Daneel.Debug.Disable()"..a7)error=oerror;Daneel.Config.debug.enableDebug=false end;function Daneel.Debug.ToRawString(Q)if Q==nil and Daneel.Config.debug.enableDebug then print("WARNING : Daneel.Debug.ToRawString( data ) : Argument 'data' is nil.")return nil end;local a8=nil;local a4=getmetatable(Q)if a4~=nil then if a4.__tostring~=nil then local a9=a4.__tostring;a4.__tostring=nil;a8=tostring(Q)a4.__tostring=a9 end end;if a8==nil then a8=tostring(Q)end;return a8 end;function Daneel.Debug.GetNameFromValue(u)Daneel.Debug.StackTrace.BeginFunction("Daneel.Debug.GetNameFromValue",u)local Z="Daneel.Debug.GetNameFromValue(value) : "if u==nil then error(Z.." Argument 'value' is nil.")end;local aa=table.getkey(Daneel.Config.objects,u)if aa==nil then aa=table.getkey(_G,u)end;Daneel.Debug.StackTrace.EndFunction()return aa end;function Daneel.Debug.CheckArgValue(V,W,ab,Y,a2)Daneel.Debug.StackTrace.BeginFunction("Daneel.Debug.CheckArgValue",V,W,ab,Y)local Z="Daneel.Debug.CheckArgValue(argument, argumentName, expectedArgumentValues[, p_errorHead, defaultValue]) : "Daneel.Debug.CheckArgType(W,"argumentName","string",Z)if ab==nil then error(Z.."Argument 'expectedArgumentValues' is nil.")end;Daneel.Debug.CheckOptionalArgType(Y,"p_errorHead","string",Z)if type(ab)~="table"then ab={ab}elseif#ab==0 then error(Z.."Argument 'expectedArgumentValues' is an empty table.")end;local ac=false;if type(V)=="string"then for n,ad in ipairs(ab)do if V:lower()==ad:lower()then V=ad;ac=true;break end end else for n,ad in ipairs(ab)do if V==ad then ac=true;break end end end;if not ac then if a2~=nil then V=a2 else for n,u in ipairs(ab)do ab[n]=tostring(u)end;error(Y.."The value '"..tostring(V).."' of argument '"..W.."' is not one of '"..table.concat(ab,"', '").."'.")end end;Daneel.Debug.StackTrace.EndFunction()return V end;local ae=Behavior;Daneel.Debug.tryGameObject=nil;function Daneel.Debug.Try(af)Daneel.Debug.StackTrace.BeginFunction("Daneel.Debug.Try",af)local Z="Daneel.Debug.Try( _function ) : "Daneel.Debug.CheckArgType(af,"_function",{"function","userdata"},Z)local ag=Daneel.Debug.tryGameObject;if ag==nil or ag.inner==nil then ag=CraftStudio.CreateGameObject("Daneel_Debug_Try")Daneel.Debug.tryGameObject=ag end;local ah=false;ag:CreateScriptedBehavior(ae,{debugTry=true,testFunction=af,successCallback=function()ah=true end})Daneel.Debug.StackTrace.EndFunction()return ah end;function Daneel.Debug.RegisterFunction(D,ai)if not Daneel.Config.debug.enableDebug then return end;local aj=true;if not Daneel.Config.debug.enableStackTrace then aj=false elseif ai.includeInStackTrace~=nil then aj=ai.includeInStackTrace end;local Z=D.."( "for n,ak in ipairs(ai)do if ak.name==nil then ak.name=ak[1]end;Z=Z..ak.name..", "end;Z=Z:sub(1,#Z-2)Z=Z.." ) : "local al=table.getvalue(_G,D)if al~=nil then local am=function(...)local an={...}if aj then Daneel.Debug.StackTrace.BeginFunction(D,...)end;for n,ak in ipairs(ai)do if ak.type==nil then ak.type=ak[2]if ak.type==nil and ak.defaultValue~=nil then ak.type=type(ak.defaultValue)end end;if ak.type~=nil then if ak.defaultValue~=nil or ak.isOptional==true then an[n]=Daneel.Debug.CheckOptionalArgType(an[n],ak.name,ak.type,Z,ak.defaultValue)else Daneel.Debug.CheckArgType(an[n],ak.name,ak.type,Z)end elseif an[n]==nil and not ak.isOptional then error(Z.."Argument '"..ak.name.."' is nil.")end;if ak.value~=nil then an[n]=Daneel.Debug.CheckArgValue(an[n],ak.name,ak.value,Z,ak.defaultValue)end end;local ao={al(unpack(an))}if aj then Daneel.Debug.StackTrace.EndFunction()end;return unpack(ao)end;table.setvalue(_G,D,am)else print("Daneel.Debug.RegisterFunction() : Function with name '"..D.."' was not found in the global table _G.")end end;Daneel.Debug.StackTrace={messages={}}function Daneel.Debug.StackTrace.BeginFunction(ap,...)if not Daneel.Config.debug.enableDebug or not Daneel.Config.debug.enableStackTrace then return end;if#Daneel.Debug.StackTrace.messages>200 then print("WARNING : your StackTrace is more than 200 items long ! Emptying the StackTrace now. Did you forget to write a 'EndFunction()' somewhere ?")Daneel.Debug.StackTrace.messages={}end;local Z="Daneel.Debug.StackTrace.BeginFunction( functionName[, ...] ) : "Daneel.Debug.CheckArgType(ap,"functionName","string",Z)local aq=ap.."( "local ak={...}if#ak>0 then for n,V in ipairs(ak)do if type(V)=="string"then aq=aq..'"'..tostring(V)..'", 'else aq=aq..tostring(V)..", "end end;aq=aq:sub(1,#aq-2)end;aq=aq.." )"table.insert(Daneel.Debug.StackTrace.messages,aq)end;function Daneel.Debug.StackTrace.EndFunction()if not Daneel.Config.debug.enableDebug or not Daneel.Config.debug.enableStackTrace then return end;table.remove(Daneel.Debug.StackTrace.messages)end;function Daneel.Debug.StackTrace.Print()if not Daneel.Config.debug.enableDebug or not Daneel.Config.debug.enableStackTrace then return end;local ar=Daneel.Debug.StackTrace.messages;Daneel.Debug.StackTrace.messages={}print("~~~~~ Daneel.Debug.StackTrace ~~~~~")if#ar<=0 then print("No message in the StackTrace.")else for n,aq in ipairs(ar)do if n<10 then n="0"..n end;print("#"..n.." "..aq)end end end;Daneel.Event={events={},persistentEvents={}}local as={}function Daneel.Event.Listen(at,au,av)local Z="Daneel.Event.Listen( eventName, functionOrObject[, isPersistent] ) : "local aw=type(au)local ax=at;if type(at)=="string"then ax={at}end;for n,at in pairs(ax)do if Daneel.Event.events[at]==nil then Daneel.Event.events[at]={}end;if Daneel.Event.persistentEvents[at]==nil then Daneel.Event.persistentEvents[at]={}end;if not table.containsvalue(Daneel.Event.events[at],au)and not table.containsvalue(Daneel.Event.persistentEvents[at],au)then if not as[at]then as[at]=true;local ay,ay,S=at:find("^On(.+)ButtonJustPressed$")if S==nil then ay,ay,S=at:find("^On(.+)ButtonJustReleased$")end;if S==nil then ay,ay,S=at:find("^On(.+)ButtonDown$")end;if S~=nil then if Daneel.Utilities.ButtonExists(S)then table.insert(Daneel.Config.hotKeys,S)elseif Daneel.Config.debug.enableDebug then print(Z.."You tried to listen to the '"..at.."' event but the '"..S.."' button does not exists in the Game Controls.")end end end;if av and aw=="table"then local a4=getmetatable(au)if a4~=nil and a4==GameObject or table.containsvalue(Daneel.Config.componentObjects,a4)then if Daneel.Config.debug.enableDebug then print(Z.."Game objects and components can't be persistent listeners",au)end;av=false end end;local az=Daneel.Event.events;if av then az=Daneel.Event.persistentEvents end;table.insert(az[at],au)end end end;function Daneel.Event.StopListen(at,au)if type(at)~="string"then au=at;at=nil end;Daneel.Debug.StackTrace.BeginFunction("Daneel.Event.StopListen",at,au)local Z="Daneel.Event.StopListen( eventName, functionOrObject ) : "Daneel.Debug.CheckOptionalArgType(at,"eventName","string",Z)Daneel.Debug.CheckArgType(au,"functionOrObject",{"table","function"},Z)local ax=at;if type(at)=="string"then ax={at}end;if ax==nil then ax=table.merge(table.getkeys(Daneel.Event.events),table.getkeys(Daneel.Event.persistentEvents))end;for n,at in pairs(ax)do local aA=Daneel.Event.events[at]if aA~=nil then table.removevalue(aA,au)end;aA=Daneel.Event.persistentEvents[at]if aA~=nil then table.removevalue(aA,au)end end;Daneel.Debug.StackTrace.EndFunction()end;function Daneel.Event.Fire(T,at,...)local ak={...}Daneel.Debug.StackTrace.BeginFunction("Daneel.Event.Fire",T,at,...)local Z="Daneel.Event.Fire( [object, ]eventName[, ...] ) : "local _=type(T)if _=="string"or _=="nil"then if at~=nil then table.insert(ak,1,at)end;at=T;T=nil else Daneel.Debug.CheckArgType(T,"object","table",Z)Daneel.Debug.CheckArgType(at,"eventName","string",Z)end;local aA={T}if T==nil then if Daneel.Event.events[at]~=nil then aA=Daneel.Event.events[at]end;if Daneel.Event.persistentEvents[at]~=nil then aA=table.merge(aA,Daneel.Event.persistentEvents[at])end end;local aB={}for n,aC in ipairs(aA)do local aw=type(aC)if aw=="function"or aw=="userdata"then if aC(unpack(ak))==false then table.insert(aB,aC)end else local a4=getmetatable(aC)local aD=not aC.isDestroyed;if a4==GameObject and aC.inner==nil then aD=false end;if aD then local a5=at;local aE=rawget(aC,at)local aF=type(aE)if aF=="function"or aF=="userdata"then if aE(unpack(ak))==false then table.insert(aB,aC)end elseif aF=="string"then a5=aE end;if a4==GameObject then aC:SendMessage(a5,ak)end end end end;if#aB>0 then for n,aC in pairs(aB)do Daneel.Event.StopListen(at,aC)end end;Daneel.Debug.StackTrace.EndFunction()end;function GameObject.On(ag,at,af)if not string.startswith(at,"On")then at="On"..at end;ag[at]=af;Daneel.Event.Listen(at,af)Daneel.Event.Fire("GameObject.On",ag,at,af)end;table.mergein(Daneel.functionsDebugInfo,{["Daneel.Event.Listen"]={{"eventName",{d,p}},{"functionOrObject",{p,z,A}},{"isPersistent",defaultValue=false}},["GameObject.On"]={{"gameObject","GameObject"},{"eventName",d},{"_function",z}}})Daneel.Time={realTime=0.0,realDeltaTime=0.0,time=0.0,deltaTime=0.0,timeScale=1.0,frameCount=0}Daneel.Storage={}function Daneel.Storage.Save(D,Q,aG)if Q~=nil and type(Q)~="table"then Q={value=Q,isSavedByDaneel=true}end;CS.Storage.Save(D,Q,function(error)if error~=nil then if Daneel.Config.debug.enableDebug then print("Daneel.Storage.Save( name, data[, callback] ) : Error saving with name, data and error : ",D,Q,error.message)end end;if aG~=nil then if error==nil then error={}end;aG(error.message)end end)end;function Daneel.Storage.Load(D,a2,aG)if aG==nil and type(a2)=="function"then aG=a2;a2=nil end;local u=nil;CS.Storage.Load(D,function(error,Q)if error~=nil then if Daneel.Config.debug.enableDebug then print("Daneel.Storage.Load( name[, defaultValue, callback] ) : Error loading with name, default value and error",D,a2,error.message)end;Q=nil end;u=a2;if Q~=nil then if type(Q)=="table"and Q.value~=nil and Q.isSavedByDaneel then u=Q.value else u=Q end end;if aG~=nil then if error==nil then error={}end;aG(u,error.message)end end)return u end;table.mergein(Daneel.functionsDebugInfo,{["Daneel.Storage.Save"]={{"name",d},{"data",isOptional=true},{"callback","function",isOptional=true}},["Daneel.Storage.Load"]={{"name",d},{"defaultValue",isOptional=true},{"callback","function",isOptional=true}}})function Daneel.DefaultConfig()local aH={debug={enableDebug=false,enableStackTrace=false},scriptPaths={},hotKeys={},objects={GameObject=GameObject,Vector3=Vector3,Quaternion=Quaternion,Plane=Plane,Ray=Ray},componentObjects={ScriptedBehavior=ScriptedBehavior,ModelRenderer=ModelRenderer,MapRenderer=MapRenderer,Camera=Camera,Transform=Transform,Physics=Physics,TextRenderer=TextRenderer,NetworkSync=NetworkSync},componentTypes={},assetObjects={Script=Script,Model=Model,ModelAnimation=ModelAnimation,Map=Map,TileSet=TileSet,Sound=Sound,Scene=Scene,Font=Font},assetTypes={}}return aH end;Daneel.Config=Daneel.DefaultConfig()function Daneel.SetComponents(aI)for aJ,aK in pairs(aI)do Daneel.Utilities.AllowDynamicGettersAndSetters(aK,{Component})if aJ~="ScriptedBehavior"then aK["__tostring"]=function(aL)return aJ..": "..aL:GetId()end end end end;function Daneel.Load()if Daneel.isLoaded then return end;Daneel.isLoading=true;local aM=Daneel.UserConfig;if type(aM)=="function"then aM=aM()end;if aM~=nil then table.mergein(Daneel.Config,aM,true)end;for n,D in ipairs(Daneel.modules.moduleNames)do local aN=Daneel.modules[D]if aN.isConfigLoaded~=true then aN.isConfigLoaded=true;if aN.Config==nil then local aH=aN.DefaultConfig;if type(aH)=="function"then aH=aH()end;if aH==nil then aH={}end;aN.Config=aH end;local aM=aN.UserConfig;if type(aM)=="function"then aM=aM()end;if aM~=nil then table.mergein(aN.Config,aM,true)end;if aN.Config.objects~=nil then table.mergein(Daneel.Config.objects,aN.Config.objects)end;if aN.Config.componentObjects~=nil then table.mergein(Daneel.Config.componentObjects,aN.Config.componentObjects)table.mergein(Daneel.Config.objects,aN.Config.componentObjects)end end end;table.mergein(Daneel.Config.objects,Daneel.Config.componentObjects,Daneel.Config.assetObjects)Daneel.SetComponents(Daneel.Config.componentObjects)table.mergein(Daneel.Config.componentTypes,table.getkeys(Daneel.Config.componentObjects))if Daneel.Config.debug.enableDebug then if Daneel.Config.debug.enableStackTrace then Daneel.Debug.SetNewError()end;for P,Q in pairs(Daneel.functionsDebugInfo)do Daneel.Debug.RegisterFunction(P,Q)end end;for aO,aP in pairs(Daneel.Config.assetObjects)do table.insert(Daneel.Config.assetTypes,aO)Daneel.Utilities.AllowDynamicGettersAndSetters(aP,{Asset})aP["__tostring"]=function(aQ)return aO..": "..Daneel.Utilities.GetId(aQ)..": '"..Map.GetPathInPackage(aQ).."'"end end;for aR,aS in pairs(Daneel.Config.scriptPaths)do local aT=CraftStudio.FindAsset(aS,"Script")if aT~=nil then Daneel.Utilities.AllowDynamicGettersAndSetters(aT,{Script,Component})aT["__tostring"]=function(aU)return"ScriptedBehavior: "..Daneel.Utilities.GetId(aU)..": '"..aS.."'"end else Daneel.Config.scriptPaths[aR]=nil;if Daneel.Config.debug.enableDebug then print("Daneel.Load() : item with key '"..aR.."' and value '"..aS.."' in 'Daneel.Config.scriptPaths' ('DaneelUserConfig()'') is not a valid script path.")end end end;CS.IsWebPlayer=type(Camera.ProjectionMode.Orthographic)=="number"Daneel.Debug.StackTrace.BeginFunction("Daneel.Load")for n,D in ipairs(Daneel.modules.moduleNames)do local aN=Daneel.modules[D]if aN.isLoaded~=true then aN.isLoaded=true;if type(aN.Load)=="function"then aN.Load()end end end;Daneel.isLoaded=true;Daneel.isLoading=false;if Daneel.Config.debug.enableDebug then print("~~~~~ Daneel loaded ~~~~~")end;Daneel.moduleUpdateFunctions={}for n,D in ipairs(Daneel.modules.moduleNames)do local aN=Daneel.modules[D]if aN.doNotCallUpdate~=true then if type(aN.Update)=="function"and not table.containsvalue(Daneel.moduleUpdateFunctions,aN.Update)then table.insert(Daneel.moduleUpdateFunctions,aN.Update)end end end;Daneel.Debug.StackTrace.EndFunction()end;function Behavior.Awake(aV)if aV.debugTry==true then CraftStudio.Destroy(aV)aV.testFunction()aV.successCallback()return end;if table.getvalue(_G,"LOAD_DANEEL")~=nil and LOAD_DANEEL==false then return end;if Daneel.isAwake then if Daneel.Config.debug.enableDebug then print("Daneel:Awake() : You tried to load Daneel twice ! This time the 'Daneel' scripted behavior was on "..tostring(aV.gameObject))end;CS.Destroy(aV)return end;Daneel.isAwake=true;Daneel.Event.Listen("OnSceneLoad",function()Daneel.isAwake=false end)Daneel.Load()Daneel.Debug.StackTrace.messages={}Daneel.Debug.StackTrace.BeginFunction("Daneel.Awake")for n,D in ipairs(Daneel.modules.moduleNames)do local aN=Daneel.modules[D]if type(aN.Awake)=="function"then aN.Awake()end end;if Daneel.Config.debug.enableDebug then print("~~~~~ Daneel awake ~~~~~")end;Daneel.Event.Fire("OnAwake")Daneel.Debug.StackTrace.EndFunction()end;function Behavior.Start(aV)if aV.debugTry then return end;Daneel.Debug.StackTrace.BeginFunction("Daneel.Start")for n,D in ipairs(Daneel.modules.moduleNames)do local aN=Daneel.modules[D]if type(aN.Start)=="function"then aN.Start()end end;if Daneel.Config.debug.enableDebug then print("~~~~~ Daneel started ~~~~~")end;Daneel.Event.Fire("OnStart")Daneel.Debug.StackTrace.EndFunction()end;function Behavior.Update(aV)if aV.debugTry then return end;local aW=os.clock()Daneel.Time.realDeltaTime=aW-Daneel.Time.realTime;Daneel.Time.realTime=aW;Daneel.Time.deltaTime=Daneel.Time.realDeltaTime*Daneel.Time.timeScale;Daneel.Time.time=Daneel.Time.time+Daneel.Time.deltaTime;Daneel.Time.frameCount=Daneel.Time.frameCount+1;for n,S in pairs(Daneel.Config.hotKeys)do if CraftStudio.Input.WasButtonJustPressed(S)then Daneel.Event.Fire("On"..S.."ButtonJustPressed")end;if CraftStudio.Input.IsButtonDown(S)then Daneel.Event.Fire("On"..S.."ButtonDown")end;if CraftStudio.Input.WasButtonJustReleased(S)then Daneel.Event.Fire("On"..S.."ButtonJustReleased")end end;for n,s in ipairs(Daneel.moduleUpdateFunctions)do s()end end