function math.isinteger(a)local b=false;if type(a)=="number"then b=a==math.floor(a)end;return b end;function math.lerp(c,d,e,f)if f=="smooth"then e=e*2;if e<1 then e=0.5*e*e*e else e=e-2;e=0.5*e*e*e+2 end elseif f=="smooth in"then e=e*e*e elseif f=="smooth out"then e=e-1;e=e*e*e+1 end;return c+(d-c)*e end;function math.warpangle(g)if g>180 then g=g-360 elseif g<-180 then g=g+360 end;return g end;function math.round(h,i)if i~=nil then h=math.floor(h*10^i+0.5)/10^i else h=math.floor(h+0.5)end;return h end;function tonumber2(j)local a=tonumber(j)if a==nil then j=tostring(j)local k="(%d+)"if j:find(".",1,true)then k="(%d+%.%d+)"end;a=j:match(j:gsub(k,"(%1)"))a=tonumber(a)end;return a end;function string.totable(l)local m={}for n=1,#l do table.insert(m,l:sub(n,n))end;return m end;function string.ucfirst(l)local o=l:gsub("^%l",string.upper)return o end;function string.lcfirst(l)local o=l:gsub("^%u",string.lower)return o end;function string.split(l,p,q)local r={}if q then local s,t=l:find(p)if s~=nil then local k=p;p=l:sub(s,t)if string.startswith(l,p)then l=l:sub(#p+1,#l)end;if not l:endswith(p)then l=l..p end;for u in l:gmatch("(.-)"..k)do table.insert(r,u)end end else if l:find(p,1,true)~=nil then if string.startswith(l,p)then l=l:sub(#p+1,#l)end;if not l:endswith(p)then l=l..p end;local v=""local w=string.totable(l)local n=1;while n<=#w do local x=w[n]if x==p or l:sub(n,n-1+#p)==p then table.insert(r,v)v=""n=n+#p else v=v..x;n=n+1 end end;if#v>0 then table.insert(r,v)end end end;if#r==0 then r={l}end;return r end;function string.startswith(l,v)local o=l:sub(1,#v)==v;return o end;function string.endswith(l,v)local o=l:sub(#l-#v+1,#l)==v;return o end;function string.trimstart(l)local o=l:gsub("^%s+","")return o end;function string.trimend(l)local o=l:gsub("%s+$","")return o end;function string.trim(l)local o=l:gsub("^%s+",""):gsub("%s+$","")return o end;function table.copy(m,y)local z={}if table.isarray(m)then for A,h in ipairs(m)do if type(h)=="table"and y then h=table.copy(h,y)end;table.insert(z,h)end else for A,h in pairs(m)do if type(h)=="table"and y then h=table.copy(h,y)end;z[A]=h end end;return z end;function table.containsvalue(m,h,B)if h==nil then return false end;if B and type(h)=='string'then h=h:lower()end;for A,C in pairs(m)do if B and type(C)=="string"then C=C:lower()end;if h==C then return true end end;return false end;function table.getlength(m,D)local E=0;if D~=nil then D=D:lower()end;for A,h in pairs(m)do if D==nil or type(A)==D then E=E+1 end end;return E end;function table.print(m)if m==nil then print("table.print( t ) : Provided table is nil.")return end;print("~~~~~ table.print("..tostring(m)..") ~~~~~ Start ~~~~~")local F=pairs;if table.getlength(m)==0 then print("Table is empty.")elseif table.isarray(m)then F=ipairs end;for A,h in F(m)do print(A,h)end;print("~~~~~ table.print("..tostring(m)..") ~~~~~ End ~~~~~")end;function table.merge(...)return table.mergein({},...)end;function table.mergein(...)local G={...}local y=false;if#G>0 and type(G[#G])~="table"then y=table.remove(G)end;local H=table.remove(G,1)if H==nil then local I="table.mergein(): No table where passed as argument."if#G>0 then table.print(G)I="table.mergein(): First argument is nil. Other arguments are shown above."end;error(I)end;for n,m in ipairs(G)do local J=type(m)if J=="table"then if table.isarray(m)then for A,h in ipairs(m)do table.insert(H,h)end else for A,h in pairs(m)do if H[A]~=nil and y and type(h)=="table"and getmetatable(h)==nil then h=table.merge(H[A],h,true)end;H[A]=h end end end end;return H end;function table.havesamecontent(K,L)if table.getlength(K)~=table.getlength(L)then return false end;for A,h in pairs(K)do if K[A]~=L[A]then return false end end;return true end;function table.combine(M,N)if#M~=#N then print("table.combine( keys, values ) : WARNING : Arguments 'keys' and 'values' have different length :",#M,#N)end;local z={}for n,A in pairs(M)do z[A]=N[n]end;return z end;function table.removevalue(m,h,O)if h==nil then return 0 end;local P=0;for A,C in pairs(m)do if C==h then if math.isinteger(A)then table.remove(m,A)else m[A]=nil end;P=P+1;if O~=nil and P==O then break end end end;return P end;function table.getkeys(m)local M={}for A,h in pairs(m)do table.insert(M,A)end;return M end;function table.getvalues(m)local N={}for A,h in pairs(m)do table.insert(N,h)end;return N end;function table.getkey(m,h)local A=nil;for Q,R in pairs(m)do if h==R then A=Q end end;return A end;function table.sortby(m,S,T)if T==nil or not(T=="asc"or T=="desc")then T="asc"end;local U={}local V={}for n=1,#m do local W=m[n][S]if V[W]==nil then table.insert(U,W)V[W]={}end;table.insert(V[W],m[n])end;if T=="desc"then table.sort(U,function(c,d)return c>d end)else table.sort(U)end;m={}for n=1,#U do for X,Y in pairs(V[U[n]])do table.insert(m,Y)end end;return m end;function table.getvalue(m,M)M=string.split(M,".")local h=m;if h==_G then local Z=false;for A,h in pairs(_G)do if A==M[1]then Z=true;break end end;if not Z then return nil end end;for n,A in ipairs(M)do if h[A]==nil then h=nil;break else h=h[A]end end;return h end;function table.setvalue(m,M,h)if M:find(".",1,true)==nil then m[M]=h else M=string.split(M,".")for n,A in ipairs(M)do if n==#M then m[A]=h else local _=m[A]if _==nil then _={}m[A]=_ end;m=_ end end end end;function table.isarray(m,a0)local a1=0;for Q,R in pairs(m)do a1=a1+1;if type(Q)~="number"or not math.isinteger(Q)then return false end end;if a0==nil or a0 then return a1==#m end;return true end;function table.reverse(m)local z={}for n,R in ipairs(m)do table.insert(z,1,R)end;return z end;function table.shift(m,a2)local A=nil;local h=nil;if table.isarray(m)then if#m>0 then h=table.removevalue(m,1)if h~=nil then A=1 end end else for Q,R in pairs(m)do A=Q;h=R;break end;if A~=nil then m[A]=nil end end;if a2 then return A,h else return h end end;function table.reindex(m)if not table.isarray(m,false)then print("table.reindex( table ) : Provided table '"..tostring(m).."' is not an array.")end;local a3=1;for n,R in pairs(m)do if type(n)=="number"and n>a3 then a3=n end end;local z={}for n=1,a3 do if m[n]~=nil then table.insert(z,m[n])end end;return z end;function table.insertonce(m,a4,h)if h==nil then h=a4;a4=nil end;for A,C in pairs(m)do if h==C then return false end end;if a4==nil then table.insert(m,h)else table.insert(m,a4,h)end;return true end